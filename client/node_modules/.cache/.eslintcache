[{"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\index.js":"1","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\App.js":"2","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\reportWebVitals.js":"3","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Routes\\Routes.js":"4","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\config\\constants.js":"5","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\PrivateRoute\\PrivateRoute.js":"6","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Input\\Input.js":"7","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Button\\Button.js":"8","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Icons\\Icons.js":"9","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Routes\\PublicRoutes.js":"10","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Routes\\PrivateRoutes.js":"11","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\utils\\route.js":"12","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Layout\\Layout.js":"13","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\Configurations.js":"14","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Settings.js":"15","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\hooks\\useDrawer.js":"16","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Header\\Header.js":"17","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Sidebar\\Sidebar.js":"18","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\hooks\\useModal.js":"19","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\MobileMenu\\MobileMenu.js":"20","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\hooks\\useWindowSize.js":"21","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\Configuration\\Configuration.js":"22","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Tabs\\Tabs.js":"23","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\NewConfiguration\\NewConfiguration.js":"24","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Menu\\Menu.js":"25","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Drawer\\Drawer.js":"26","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Header\\ProfileMenu\\ProfileMenu.js":"27","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Sidebar\\SidebarMenu\\SidebarMenu.js":"28","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Modal\\Modal.js":"29","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Tabs\\TabPane\\TabPane.js":"30","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Tag\\Tag.js":"31","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Tooltip\\Tooltip.js":"32","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Form\\FormItem\\FormItem.js":"33","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Menu\\SubMenu\\SubMenu.js":"34","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Menu\\MenuItem\\MenuItem.js":"35","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\store.js":"36","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\config\\axios.js":"37","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\index.js":"38","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\types.js":"39","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\utils\\auth.js":"40","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\auth.js":"41","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\auth.js":"42","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\services\\AuthService.js":"43","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\config\\env.js":"44","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\global\\Messages\\Messages.js":"45","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\components.js":"46","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\components.js":"47","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Auth\\Register\\Register.js":"48","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Auth\\Login\\Login.js":"49","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\users.js":"50","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\services\\UserService.js":"51","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Spinner\\Spinner.js":"52","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\global.js":"53","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\global.js":"54","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\global\\PasswordConfirmationModal\\PasswordConfirmationModal.js":"55","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\configurations.js":"56","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Input\\PasswordInput.js":"57","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Auth\\AuthPage.js":"58","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\configurations.js":"59","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\EditConfigurationDrawer\\EditConfigurationDrawer.js":"60","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\NewConfiguration\\Modal\\Modal.js":"61","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Telegram.js":"62","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Security\\Security.js":"63","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\AccountSettings\\AccountSettings.js":"64","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\AccountSettings\\Select\\Select.js":"65","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\services\\ConfigurationService.js":"66","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Security\\PasswordUpdateModal\\PasswordUpdateModal.js":"67","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\EditConfigurationDrawer\\NameUpdateModal\\NameUpdateModal.js":"68","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Switch\\Switch.js":"69","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Connected\\Connected.js":"70","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Steps\\Steps.js":"71","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Steps\\StartBot\\StartBot.js":"72","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Steps\\CopyTelegramID\\CopyTelegramID.js":"73","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Steps\\EnterTelegramID\\EnterTelegramID.js":"74","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\History\\History.js":"75","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Table\\Table.js":"76","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Table\\Column\\Column.js":"77","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\global\\ActionConfirmModal\\ActionConfirmModal.js":"78"},{"size":664,"mtime":1633281381770,"results":"79","hashOfConfig":"80"},{"size":669,"mtime":1633283363294,"results":"81","hashOfConfig":"80"},{"size":417,"mtime":1631630332211,"results":"82","hashOfConfig":"80"},{"size":1511,"mtime":1633283363304,"results":"83","hashOfConfig":"80"},{"size":1495,"mtime":1633457184847,"results":"84","hashOfConfig":"80"},{"size":434,"mtime":1632944478808,"results":"85","hashOfConfig":"80"},{"size":690,"mtime":1633283812383,"results":"86","hashOfConfig":"80"},{"size":837,"mtime":1633283363314,"results":"87","hashOfConfig":"80"},{"size":1073,"mtime":1633281381766,"results":"88","hashOfConfig":"80"},{"size":1444,"mtime":1633283363303,"results":"89","hashOfConfig":"80"},{"size":1508,"mtime":1633457184841,"results":"90","hashOfConfig":"80"},{"size":72,"mtime":1632944478817,"results":"91","hashOfConfig":"80"},{"size":1654,"mtime":1633283363303,"results":"92","hashOfConfig":"80"},{"size":3187,"mtime":1633457184839,"results":"93","hashOfConfig":"80"},{"size":2973,"mtime":1633283363306,"results":"94","hashOfConfig":"80"},{"size":418,"mtime":1632944478812,"results":"95","hashOfConfig":"80"},{"size":1025,"mtime":1633281381757,"results":"96","hashOfConfig":"80"},{"size":2112,"mtime":1633283363312,"results":"97","hashOfConfig":"80"},{"size":344,"mtime":1633283363318,"results":"98","hashOfConfig":"80"},{"size":2365,"mtime":1633367148727,"results":"99","hashOfConfig":"80"},{"size":643,"mtime":1632944478813,"results":"100","hashOfConfig":"80"},{"size":3690,"mtime":1633539007330,"results":"101","hashOfConfig":"80"},{"size":351,"mtime":1632944478810,"results":"102","hashOfConfig":"80"},{"size":453,"mtime":1633367148726,"results":"103","hashOfConfig":"80"},{"size":463,"mtime":1632944478806,"results":"104","hashOfConfig":"80"},{"size":1888,"mtime":1633420758110,"results":"105","hashOfConfig":"80"},{"size":4105,"mtime":1633283363302,"results":"106","hashOfConfig":"80"},{"size":2598,"mtime":1633457184844,"results":"107","hashOfConfig":"80"},{"size":3821,"mtime":1633457184846,"results":"108","hashOfConfig":"80"},{"size":784,"mtime":1633283363317,"results":"109","hashOfConfig":"80"},{"size":467,"mtime":1633367148731,"results":"110","hashOfConfig":"80"},{"size":1319,"mtime":1632944478811,"results":"111","hashOfConfig":"112"},{"size":657,"mtime":1632944478775,"results":"113","hashOfConfig":"80"},{"size":2183,"mtime":1633283363316,"results":"114","hashOfConfig":"80"},{"size":1260,"mtime":1633281381766,"results":"115","hashOfConfig":"80"},{"size":387,"mtime":1631689855384,"results":"116","hashOfConfig":"80"},{"size":638,"mtime":1633281381769,"results":"117","hashOfConfig":"80"},{"size":329,"mtime":1633367148734,"results":"118","hashOfConfig":"80"},{"size":1219,"mtime":1633457184849,"results":"119","hashOfConfig":"80"},{"size":1408,"mtime":1633283363324,"results":"120","hashOfConfig":"80"},{"size":2843,"mtime":1633715734053,"results":"121","hashOfConfig":"80"},{"size":1097,"mtime":1633283363321,"results":"122","hashOfConfig":"80"},{"size":756,"mtime":1633714649396,"results":"123","hashOfConfig":"80"},{"size":79,"mtime":1632944546516,"results":"124","hashOfConfig":"80"},{"size":1419,"mtime":1633420758109,"results":"125","hashOfConfig":"80"},{"size":838,"mtime":1633281381772,"results":"126","hashOfConfig":"80"},{"size":828,"mtime":1633281381771,"results":"127","hashOfConfig":"80"},{"size":3873,"mtime":1633283812381,"results":"128","hashOfConfig":"80"},{"size":3179,"mtime":1633283812380,"results":"129","hashOfConfig":"80"},{"size":3823,"mtime":1633420758114,"results":"130","hashOfConfig":"80"},{"size":1355,"mtime":1633420758116,"results":"131","hashOfConfig":"80"},{"size":766,"mtime":1633281381768,"results":"132","hashOfConfig":"80"},{"size":1325,"mtime":1633457184848,"results":"133","hashOfConfig":"80"},{"size":1742,"mtime":1633457184848,"results":"134","hashOfConfig":"80"},{"size":2056,"mtime":1633457184845,"results":"135","hashOfConfig":"80"},{"size":995,"mtime":1633420758114,"results":"136","hashOfConfig":"80"},{"size":972,"mtime":1633283812383,"results":"137","hashOfConfig":"80"},{"size":520,"mtime":1633283363300,"results":"138","hashOfConfig":"80"},{"size":2257,"mtime":1633420758113,"results":"139","hashOfConfig":"80"},{"size":15776,"mtime":1633539007331,"results":"140","hashOfConfig":"80"},{"size":1759,"mtime":1633457184841,"results":"141","hashOfConfig":"80"},{"size":9130,"mtime":1633283363310,"results":"142","hashOfConfig":"80"},{"size":1517,"mtime":1633283363306,"results":"143","hashOfConfig":"80"},{"size":7995,"mtime":1633283363304,"results":"144","hashOfConfig":"80"},{"size":4248,"mtime":1633283363305,"results":"145","hashOfConfig":"80"},{"size":696,"mtime":1633420758116,"results":"146","hashOfConfig":"80"},{"size":1908,"mtime":1633457184842,"results":"147","hashOfConfig":"80"},{"size":1830,"mtime":1633457184840,"results":"148","hashOfConfig":"80"},{"size":1354,"mtime":1633420758112,"results":"149","hashOfConfig":"80"},{"size":1815,"mtime":1633457184843,"results":"150","hashOfConfig":"80"},{"size":811,"mtime":1633283363309,"results":"151","hashOfConfig":"80"},{"size":713,"mtime":1633420758108,"results":"152","hashOfConfig":"80"},{"size":426,"mtime":1633283363308,"results":"153","hashOfConfig":"80"},{"size":704,"mtime":1633283363308,"results":"154","hashOfConfig":"80"},{"size":689,"mtime":1633547540046,"results":"155","hashOfConfig":"80"},{"size":2288,"mtime":1633551939609,"results":"156","hashOfConfig":"80"},{"size":219,"mtime":1633548509164,"results":"157","hashOfConfig":"80"},{"size":1080,"mtime":1633457184844,"results":"158","hashOfConfig":"80"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"1s3z4fm",{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"161"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"161"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"161"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"161"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"161"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"161"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"161"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"161"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"161"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"161"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"161"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"161"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"161"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"161"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"161"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"161"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"161"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"161"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},"whki2",{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"161"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"161"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"161"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"161"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"161"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"161"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"161"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"161"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"161"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"161"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"161"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"161"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"161"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"161"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"161"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\index.js",[],["352","353"],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\App.js",["354"],"import { BrowserRouter as Router } from 'react-router-dom';\r\nimport Routes from './components/Routes/Routes';\r\nimport PropTypes from 'prop-types';\r\nimport './components/shared/Icons/Icons';\r\nimport { authenticateUser } from './utils/auth';\r\nimport Messages from './components/global/Messages/Messages';\r\nimport PasswordConfirmationModal from './components/global/PasswordConfirmationModal/PasswordConfirmationModal';\r\n\r\nauthenticateUser();\r\n\r\nconst App = props => {\r\n    return (\r\n        <Router>\r\n            <Messages />\r\n            <PasswordConfirmationModal />\r\n            <Routes />\r\n        </Router>\r\n    );\r\n};\r\n\r\nApp.propTypes = {};\r\n\r\nexport default App;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\reportWebVitals.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Routes\\Routes.js",["355","356","357","358","359","360"],"import PropTypes from 'prop-types';\r\nimport React, { Suspense, lazy, useEffect } from 'react';\r\nimport { useLocation, Switch, Redirect } from 'react-router-dom';\r\nimport { isPrivateRoute } from '../../utils/route';\r\nimport PublicRoutes from './PublicRoutes';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchCurrentUser } from '../../redux/actions/auth';\r\nimport Spinner from '../shared/Spinner/Spinner';\r\nimport { ROUTES, SPINNER_SIZES } from '../../config/constants';\r\nimport { setAppLoading } from '../../redux/actions/global';\r\nconst PrivateRoutes = React.lazy(() => import('./PrivateRoutes'));\r\n\r\nconst Routes = props => {\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n\r\n    const isAppLoading = useSelector(state => state.global.isAppLoading);\r\n\r\n    useEffect(() => {\r\n        const loadApp = async () => {\r\n            if (localStorage.getItem('token')) {\r\n                await dispatch(fetchCurrentUser());\r\n            }\r\n\r\n            dispatch(setAppLoading(false));\r\n        };\r\n\r\n        loadApp();\r\n    }, []);\r\n\r\n    return isAppLoading ? (\r\n        <Spinner size={SPINNER_SIZES.medium} />\r\n    ) : (\r\n        <>\r\n            <PublicRoutes />\r\n            {isPrivateRoute(location.pathname) ? (\r\n                <Suspense fallback={<Spinner size={SPINNER_SIZES.medium} />}>\r\n                    <PrivateRoutes />\r\n                </Suspense>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nRoutes.propTypes = {};\r\n\r\nexport default Routes;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\config\\constants.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\PrivateRoute\\PrivateRoute.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Input\\Input.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Button\\Button.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Icons\\Icons.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Routes\\PublicRoutes.js",["361","362"],"import PropTypes from 'prop-types';\r\nimport { Redirect, Route, Switch, useHistory, useLocation } from 'react-router-dom';\r\nimport { ROUTES } from '../../config/constants';\r\nimport Login from '../Auth/Login/Login';\r\nimport Register from '../Auth/Register/Register';\r\nimport { useSelector } from 'react-redux';\r\nimport React, { useEffect } from 'react';\r\nimport { isPrivateRoute } from '../../utils/route';\r\nimport AuthPage from '../Auth/AuthPage';\r\n\r\nconst PublicRoutes = props => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated && !isPrivateRoute(location.pathname)) {\r\n            history.push(ROUTES.settings.path);\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    return (\r\n        <Switch>\r\n            <Route\r\n                path={[ROUTES.login.path, ROUTES.register.path]}\r\n                render={() => (\r\n                    <AuthPage>\r\n                        <Route exact path={ROUTES.login.path} component={Login} />\r\n                        <Route exact path={ROUTES.register.path} component={Register} />\r\n                    </AuthPage>\r\n                )}\r\n            />\r\n\r\n            {!isPrivateRoute(location.pathname) && <Redirect from={'/'} to={ROUTES.login.path} />}\r\n        </Switch>\r\n    );\r\n};\r\n\r\nPublicRoutes.propTypes = {};\r\n\r\nexport default PublicRoutes;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Routes\\PrivateRoutes.js",["363"],"import PropTypes from 'prop-types';\r\nimport { Redirect, Switch } from 'react-router-dom';\r\nimport { ROUTES } from '../../config/constants';\r\nimport Layout from '../Layout/Layout';\r\nimport PrivateRoute from '../shared/PrivateRoute/PrivateRoute';\r\nimport Settings from '../Settings/Settings';\r\nimport Configurations from '../Configurations/Configurations';\r\nimport History from '../History/History';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PrivateRoutes = props => {\r\n    const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\r\n\r\n    return (\r\n        <Layout>\r\n            <Switch>\r\n                <PrivateRoute path={ROUTES.settings.path} component={Settings} isAuthenticated={isAuthenticated} />\r\n                <PrivateRoute\r\n                    exact\r\n                    path={ROUTES.configurations.path}\r\n                    component={Configurations}\r\n                    isAuthenticated={isAuthenticated}\r\n                />\r\n                <PrivateRoute\r\n                    exact\r\n                    path={ROUTES.configurations.path}\r\n                    component={Configurations}\r\n                    isAuthenticated={isAuthenticated}\r\n                />\r\n                <PrivateRoute exact path={ROUTES.history.path} component={History} isAuthenticated={isAuthenticated} />\r\n                <Redirect from={'/'} to={ROUTES.login.path} />\r\n            </Switch>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nPrivateRoutes.propTypes = {};\r\n\r\nexport default PrivateRoutes;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\utils\\route.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Layout\\Layout.js",["364","365"],"import PropTypes from 'prop-types';\r\nimport Header from '../Header/Header';\r\nimport Sidebar from '../Sidebar/Sidebar';\r\nimport { useState } from 'react';\r\nimport useWindowSize from '../../hooks/useWindowSize';\r\nimport { BREAKPOINTS } from '../../config/constants';\r\nimport MobileMenu from '../MobileMenu/MobileMenu';\r\nimport useDrawer from '../../hooks/useDrawer';\r\nimport classNames from 'classnames';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst Layout = props => {\r\n    const { children, ...layoutProps } = props;\r\n\r\n    const isSidebarCollapsed = useSelector(state => state.global.isSidebarCollapsed);\r\n\r\n    const { width: windowWidth } = useWindowSize();\r\n\r\n    const [isMobileMenuVisible, openMobileMenu, closeMobileMenu] = useDrawer();\r\n\r\n    return (\r\n        <div className={'min-h-screen flex'}>\r\n            {windowWidth > BREAKPOINTS.lg ? (\r\n                <Sidebar />\r\n            ) : (\r\n                <MobileMenu isVisible={isMobileMenuVisible} closeMenu={closeMobileMenu} />\r\n            )}\r\n            <div\r\n                className={classNames('flex flex-auto flex-col transition-all duration-300', {\r\n                    'ml-24': windowWidth > BREAKPOINTS.lg && isSidebarCollapsed,\r\n                    'ml-72': windowWidth > BREAKPOINTS.lg && !isSidebarCollapsed,\r\n                })}\r\n            >\r\n                <Header openMobileMenu={openMobileMenu} />\r\n                <main className='flex-auto transition-all duration-300 bg-gray-100' {...layoutProps}>\r\n                    {children}\r\n                </main>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nLayout.propTypes = {};\r\n\r\nexport default Layout;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\Configurations.js",["366","367","368"],"import PropTypes from 'prop-types';\r\nimport Configuration from './Configuration/Configuration';\r\nimport NewConfiguration from './NewConfiguration/NewConfiguration';\r\nimport { useEffect, useState } from 'react';\r\nimport EditConfigurationDrawer from './EditConfigurationDrawer/EditConfigurationDrawer';\r\nimport NewConfigurationModal from './NewConfiguration/Modal/Modal';\r\nimport useModal from '../../hooks/useModal';\r\nimport useDrawer from '../../hooks/useDrawer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getConfigurationsList } from '../../redux/actions/configurations';\r\nimport ActionConfirmModal from '../global/ActionConfirmModal/ActionConfirmModal';\r\n\r\nconst Configurations = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const configurations = useSelector(state => state.configurations.list);\r\n    const user = useSelector(state => state.auth.user);\r\n\r\n    const [isNewConfigurationModalVisible, showNewConfigurationModal, hideNewConfigurationModal] = useModal();\r\n    const [isConfigurationEditDrawerVisible, openConfigurationEditDrawer, closeConfigurationEditDrawer] = useDrawer();\r\n\r\n    const [selectedConfiguration, setSelectedConfiguration] = useState({});\r\n\r\n    useEffect(() => {\r\n        dispatch(getConfigurationsList());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!isConfigurationEditDrawerVisible) {\r\n            setSelectedConfiguration({});\r\n        }\r\n    }, [isConfigurationEditDrawerVisible]);\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(selectedConfiguration).length) {\r\n            const matchedConfiguration = configurations.find(\r\n                configuration => configuration.id === selectedConfiguration.id\r\n            );\r\n            setSelectedConfiguration(matchedConfiguration);\r\n        }\r\n    }, [configurations]);\r\n\r\n    const editConfiguration = configuration => {\r\n        setSelectedConfiguration(configuration);\r\n        openConfigurationEditDrawer();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='px-6 py-10 flex flex-wrap gap-6'>\r\n                {configurations.map(configuration => {\r\n                    return (\r\n                        <Configuration\r\n                            key={configuration.id}\r\n                            isEditable={configuration.user_id === user.id}\r\n                            editConfiguration={editConfiguration}\r\n                            // showConfigurationStatusChangeModal={showConfigurationStatusChangeModal}\r\n                            {...configuration}\r\n                        />\r\n                    );\r\n                })}\r\n                <NewConfiguration showNewConfigurationModal={showNewConfigurationModal} />\r\n            </div>\r\n\r\n            <EditConfigurationDrawer\r\n                isVisible={isConfigurationEditDrawerVisible}\r\n                closeDrawer={closeConfigurationEditDrawer}\r\n                configuration={selectedConfiguration}\r\n            />\r\n\r\n            <ActionConfirmModal />\r\n\r\n            <NewConfigurationModal isVisible={isNewConfigurationModalVisible} hideModal={hideNewConfigurationModal} />\r\n        </>\r\n    );\r\n};\r\n\r\nConfigurations.propTypes = {};\r\n\r\nexport default Configurations;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Settings.js",["369","370"],"import PropTypes from 'prop-types';\r\nimport useWindowSize from '../../hooks/useWindowSize';\r\nimport { Link, Switch, Route, Redirect, useLocation } from 'react-router-dom';\r\nimport { BREAKPOINTS, ROUTES } from '../../config/constants';\r\nimport Tabs from '../shared/Tabs/Tabs';\r\nimport AccountSettings from './AccountSettings/AccountSettings';\r\nimport Security from './Security/Security';\r\nimport Telegram from './Telegram/Telegram';\r\nimport Select from './AccountSettings/Select/Select';\r\n\r\nconst Settings = props => {\r\n    const { pathname } = useLocation();\r\n\r\n    const { width: windowWidth } = useWindowSize();\r\n\r\n    return (\r\n        <div className='lg:flex w-full lg:h-full pb-0 pr-0 text-gray-800'>\r\n            {windowWidth > BREAKPOINTS.lg ? (\r\n                <div className='w-4/12 h-full pl-10 pt-10 border-r border-gray-300'>\r\n                    <h1 className='text-2xl text-gray-800 font-medium pb-6 mb-10 border-b border-gray-300'>Settings</h1>\r\n                    <Tabs className={'text-gray-600'}>\r\n                        <Link to={ROUTES.accountSettings.path}>\r\n                            <Tabs.Pane\r\n                                icon={'user-circle'}\r\n                                className={'hover:text-gray-900 pb-6 border-b border-gray-300'}\r\n                            >\r\n                                Account Settings\r\n                            </Tabs.Pane>\r\n                        </Link>\r\n                        <Link to={ROUTES.securitySettings.path}>\r\n                            <Tabs.Pane\r\n                                icon={'shield-alt'}\r\n                                className={'hover:text-gray-900 pb-6 border-b border-gray-300'}\r\n                            >\r\n                                Security\r\n                            </Tabs.Pane>\r\n                        </Link>\r\n\r\n                        <Link to={ROUTES.telegramSettings.path}>\r\n                            <Tabs.Pane icon={['fab', 'telegram']} className={'hover:text-gray-900'}>\r\n                                Telegram\r\n                            </Tabs.Pane>\r\n                        </Link>\r\n                    </Tabs>\r\n                </div>\r\n            ) : (\r\n                <div className='p-10 pb-4 pr-8'>\r\n                    <h1 className='text-2xl text-gray-800 font-medium mb-4'>Settings</h1>\r\n                    <Select />\r\n                </div>\r\n            )}\r\n\r\n            <div className='h-full flex-grow p-10'>\r\n                <Switch>\r\n                    <Route exact path={ROUTES.accountSettings.path} component={AccountSettings} />\r\n                    <Route exact path={ROUTES.securitySettings.path} component={Security} />\r\n                    <Route exact path={ROUTES.telegramSettings.path} component={Telegram} />\r\n                    <Redirect to={ROUTES.accountSettings.path} />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSettings.propTypes = {};\r\n\r\nexport default Settings;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\hooks\\useDrawer.js",["371"],"import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useDrawer = props => {\r\n    const [isVisible, setIsVisible] = useState(false);\r\n\r\n    const openDrawer = () => {\r\n        setIsVisible(true);\r\n    };\r\n\r\n    const closeDrawer = () => {\r\n        setIsVisible(false);\r\n    };\r\n\r\n    return [isVisible, openDrawer, closeDrawer];\r\n};\r\n\r\nuseDrawer.propTypes = {};\r\n\r\nexport default useDrawer;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Header\\Header.js",["372","373"],"import PropTypes from 'prop-types';\r\nimport ProfileMenu from './ProfileMenu/ProfileMenu';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { BREAKPOINTS } from '../../config/constants';\r\nimport useWindowSize from '../../hooks/useWindowSize';\r\n\r\nconst Header = props => {\r\n    const { openMobileMenu, ...headerProps } = props;\r\n\r\n    const { width: windowWidth } = useWindowSize();\r\n\r\n    return (\r\n        <div className='bg-white shadow flex justify-end items-center pr-10 px-6 md:py-2 h-14'>\r\n            <div className='flex flex-col'>\r\n                {windowWidth > BREAKPOINTS.lg ? (\r\n                    <ProfileMenu />\r\n                ) : (\r\n                    <FontAwesomeIcon\r\n                        icon='bars'\r\n                        className='fa-2x z-50 text-indigo-700 cursor-pointer'\r\n                        onClick={openMobileMenu}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {};\r\n\r\nexport default Header;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Sidebar\\Sidebar.js",["374"],"import PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport classNames from 'classnames';\r\nimport logo from '../../assets/images/logo.svg';\r\nimport SidebarMenu from './SidebarMenu/SidebarMenu';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleSidebarCollapsedState } from '../../redux/actions/global';\r\n\r\nconst Sidebar = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const isSidebarCollapsed = useSelector(state => state.global.isSidebarCollapsed);\r\n\r\n    const onSidebarToggle = () => {\r\n        dispatch(toggleSidebarCollapsedState());\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={classNames('min-h-screen fixed shadow pt-4 transition-all duration-300 ease-in-out', {\r\n                'w-24': isSidebarCollapsed,\r\n                'w-72': !isSidebarCollapsed,\r\n            })}\r\n        >\r\n            <FontAwesomeIcon\r\n                icon={isSidebarCollapsed ? 'chevron-circle-right' : 'chevron-circle-left'}\r\n                className={classNames(\r\n                    'fa-2x text-indigo-600 bg-transparent cursor-pointer mt-2 absolute transition-all duration-300 ease-in-out top-1',\r\n                    { 'left-20': isSidebarCollapsed, 'left-64 ml-4': !isSidebarCollapsed }\r\n                )}\r\n                onClick={onSidebarToggle}\r\n            />\r\n            <div className='flex flex-col items-center justify-start px-4 ml-1 mb-10'>\r\n                <img className='w-24 h-24' src={logo} alt='logo' />\r\n                <span\r\n                    className={classNames(\r\n                        'text-gray-600 ml-4 text-2xl font-bold transition-opacity delay-150 duration-300 whitespace-nowrap',\r\n                        {\r\n                            'opacity-0 invisible': isSidebarCollapsed,\r\n                        }\r\n                    )}\r\n                >\r\n                    Crypto Trader\r\n                </span>\r\n            </div>\r\n\r\n            <SidebarMenu isSidebarCollapsed={isSidebarCollapsed} />\r\n        </div>\r\n    );\r\n};\r\n\r\nSidebar.propTypes = {};\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\hooks\\useModal.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\MobileMenu\\MobileMenu.js",["375"],"import PropTypes from 'prop-types';\r\nimport Drawer from '../shared/Drawer/Drawer';\r\nimport Menu from '../shared/Menu/Menu';\r\nimport { ROUTES, DRAWER_SIDE } from '../../config/constants';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nconst MobileMenu = props => {\r\n    const location = useLocation();\r\n\r\n    const { pathname } = location;\r\n\r\n    const { isVisible, closeMenu } = props;\r\n\r\n    const onMenuItemClick = () => {\r\n        closeMenu();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Drawer side={DRAWER_SIDE.left} className={'bg-white'} isVisible={isVisible} onClose={closeMenu}>\r\n                <Menu className={'px-3'}>\r\n                    <Menu.SubMenu\r\n                        className={'text-gray-400'}\r\n                        icon={<FontAwesomeIcon icon={'hand-holding-usd'} className='fa-lg' />}\r\n                        title={'Trade'}\r\n                        isAnyChildMenuActive={pathname.includes(ROUTES.configurations.path)}\r\n                    >\r\n                        <Link\r\n                            className={'w-full block my-2 px-2'}\r\n                            to={ROUTES.configurations.path}\r\n                            onClick={onMenuItemClick}\r\n                        >\r\n                            <Menu.Item\r\n                                className={'text-gray-400'}\r\n                                isActive={pathname.includes(ROUTES.configurations.path)}\r\n                            >\r\n                                Configurations\r\n                            </Menu.Item>\r\n                        </Link>\r\n                    </Menu.SubMenu>\r\n                    <Link className={'w-full block my-2 px-6'} to={ROUTES.settings.path} onClick={onMenuItemClick}>\r\n                        <Menu.Item\r\n                            className={'text-gray-400'}\r\n                            icon={<FontAwesomeIcon icon={'cog'} className='fa-lg text-white-600' />}\r\n                            isActive={pathname.includes(ROUTES.settings.path)}\r\n                        >\r\n                            Settings\r\n                        </Menu.Item>\r\n                    </Link>\r\n                </Menu>\r\n            </Drawer>\r\n        </>\r\n    );\r\n};\r\n\r\nMobileMenu.propTypes = {};\r\n\r\nexport default MobileMenu;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\hooks\\useWindowSize.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\Configuration\\Configuration.js",["376"],"import styles from './Configuration.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport classNames from 'classnames';\r\nimport Tag from '../../shared/Tag/Tag';\r\nimport Button from '../../shared/Button/Button';\r\nimport { BUTTON_TYPES } from '../../../config/constants';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateUser, updateUserConfiguration } from '../../../redux/actions/users';\r\nimport { showActionConfirmationModal } from '../../../redux/actions/global';\r\n\r\nconst Configuration = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector(state => state.auth.user);\r\n\r\n    const { isEditable, editConfiguration, ...configuration } = props;\r\n\r\n    const { name, is_spot_enabled, is_futures_enabled } = configuration;\r\n\r\n    const { active_configuration } = user;\r\n\r\n    const isActive = configuration.id === active_configuration;\r\n\r\n    const onEditClick = () => {\r\n        editConfiguration(configuration);\r\n    };\r\n\r\n    const onStatusChangeClick = () => {\r\n        dispatch(\r\n            showActionConfirmationModal({\r\n                okCallback: updateConfigurationActivationStatus,\r\n                title: `Confirm ${isActive ? 'deactivation' : 'activation'}`,\r\n            })\r\n        );\r\n    };\r\n\r\n    const updateConfigurationActivationStatus = () => {\r\n        dispatch(updateUserConfiguration({ id: user.id, active_configuration: isActive ? null : configuration.id }));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.configuration}>\r\n                <div className='flex justify-between'>\r\n                    <h1 className='text-lg font-medium'>{name}</h1>\r\n                    <div className='flex'>\r\n                        {isEditable && (\r\n                            <div className='mr-5' onClick={onEditClick}>\r\n                                <FontAwesomeIcon icon={'pencil-alt'} className='fa-xs text-gray-500 cursor-pointer' />\r\n                            </div>\r\n                        )}\r\n                        <div>\r\n                            <FontAwesomeIcon\r\n                                icon={'dot-circle'}\r\n                                className={classNames({\r\n                                    'text-green-500': isActive,\r\n                                    'text-gray-300': !isActive,\r\n                                })}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {/*<span className='text-sm text-gray-400 mb-3'>Description</span>*/}\r\n                <div className='text-sm mt-8 mb-4'>\r\n                    {is_spot_enabled && (\r\n                        <Tag className={'mr-2'} color={'green'}>\r\n                            Spot\r\n                        </Tag>\r\n                    )}\r\n                    {is_futures_enabled && <Tag color={'red'}>Futures</Tag>}\r\n                </div>\r\n                <div className={'flex justify-end'}>\r\n                    <Button\r\n                        className={classNames({\r\n                            [styles.activateButton]: !isActive,\r\n                            [styles.deactivateButton]: isActive,\r\n                        })}\r\n                        type={BUTTON_TYPES.primary}\r\n                        onClick={onStatusChangeClick}\r\n                    >\r\n                        {isActive ? 'Deactivate' : 'Activate'}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nConfiguration.propTypes = {\r\n    title: PropTypes.string,\r\n    text: PropTypes.string,\r\n};\r\n\r\nexport default Configuration;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Tabs\\Tabs.js",["377"],"import PropTypes from 'prop-types';\r\nimport TabPane from './TabPane/TabPane';\r\n\r\nconst Tabs = props => {\r\n    const { children, ...tabsProps } = props;\r\n\r\n    return (\r\n        <div className={`flex flex-col`} {...tabsProps}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nTabs.propTypes = {};\r\n\r\nTabs.Pane = TabPane;\r\n\r\nexport default Tabs;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\NewConfiguration\\NewConfiguration.js",["378"],"import styles from './NewConfiguration.module.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NewConfiguration = props => {\r\n    const { showNewConfigurationModal } = props;\r\n\r\n    return (\r\n        <div className={styles.configuration} onClick={showNewConfigurationModal}>\r\n            <span className='text-4xl text-gray-400 font-thin'>+</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nNewConfiguration.propTypes = {};\r\n\r\nexport default NewConfiguration;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Menu\\Menu.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Drawer\\Drawer.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Header\\ProfileMenu\\ProfileMenu.js",["379","380","381"],"import { Fragment } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Menu, Transition } from '@headlessui/react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ROUTES } from '../../../config/constants';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteAuthToken } from '../../../utils/auth';\r\nimport { setCurrentUser, setUserLoggedOut } from '../../../redux/actions/auth';\r\n\r\nconst ProfileMenu = props => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const user = useSelector(state => state.auth.user);\r\n\r\n    const onLogoutClick = () => {\r\n        dispatch(setUserLoggedOut());\r\n        deleteAuthToken();\r\n        history.push(ROUTES.login.path);\r\n    };\r\n\r\n    return (\r\n        <Menu as='div' className='relative inline-block text-left z-30'>\r\n            <Menu.Button className='flex items-center relative cursor-pointer'>\r\n                <img\r\n                    className={'rounded-full w-10 h-auto mr-1'}\r\n                    src={`https://ui-avatars.com/api/?background=4338CA&color=fff&name=${user.first_name}+${user.last_name}`}\r\n                />\r\n                {/*<FontAwesomeIcon icon='user-circle' className='fa-2x mr-2' />*/}\r\n                <span>\r\n                    {user.first_name} {user.last_name}\r\n                </span>\r\n            </Menu.Button>\r\n\r\n            <Transition\r\n                as={Fragment}\r\n                enter='transition ease-out duration-300'\r\n                enterFrom='transform opacity-0 scale-95'\r\n                enterTo='transform opacity-100 scale-100'\r\n                leave='transition ease-in duration-200'\r\n                leaveFrom='transform opacity-100 scale-100'\r\n                leaveTo='transform opacity-0 scale-95'\r\n            >\r\n                <Menu.Items className='absolute right-0 w-56 mt-2 origin-top-right bg-white divide-y divide-gray-100 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none'>\r\n                    <div className='px-1 py-1 '>\r\n                        <Link to={ROUTES.settings.path}>\r\n                            <Menu.Item>\r\n                                {({ active }) => (\r\n                                    <button\r\n                                        className={`${\r\n                                            active ? 'hover:bg-gray-100 text-black' : 'text-gray-900'\r\n                                        } group flex rounded-md items-center w-full px-3 py-2 text-sm`}\r\n                                    >\r\n                                        <FontAwesomeIcon icon='cog' className='text-indigo-600 w-6 mr-3' />\r\n                                        Settings\r\n                                    </button>\r\n                                )}\r\n                            </Menu.Item>\r\n                        </Link>\r\n                    </div>\r\n                    <div className='px-1 py-1'>\r\n                        <Link to={'#'} onClick={onLogoutClick}>\r\n                            <Menu.Item>\r\n                                {({ active }) => (\r\n                                    <button\r\n                                        className={`${\r\n                                            active ? 'hover:bg-gray-100 text-black' : 'text-gray-900'\r\n                                        } group flex rounded-md items-center w-full px-3 py-3 text-sm`}\r\n                                    >\r\n                                        {/*<img src={logOut} className='w-6 ml-1 mr-2' alt='icon' />*/}\r\n                                        <FontAwesomeIcon icon='sign-out-alt' className='text-red-600 w-6 mr-3' />\r\n                                        Log out\r\n                                    </button>\r\n                                )}\r\n                            </Menu.Item>\r\n                        </Link>\r\n                    </div>\r\n                </Menu.Items>\r\n            </Transition>\r\n        </Menu>\r\n    );\r\n};\r\n\r\nProfileMenu.propTypes = {};\r\n\r\nexport default ProfileMenu;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Sidebar\\SidebarMenu\\SidebarMenu.js",["382"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Menu from '../../shared/Menu/Menu';\r\nimport { ROUTES } from '../../../config/constants';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nconst SidebarMenu = props => {\r\n    const location = useLocation();\r\n\r\n    const { pathname } = location;\r\n\r\n    const { isSidebarCollapsed } = props;\r\n\r\n    return (\r\n        <>\r\n            <Menu className={'flex flex-col items-center justify-center'}>\r\n                <Menu.SubMenu\r\n                    className={'text-gray-400'}\r\n                    icon={<FontAwesomeIcon icon={'hand-holding-usd'} className='fa-lg' />}\r\n                    title={'Trade'}\r\n                    isMenuCollapsed={isSidebarCollapsed}\r\n                    isAnyChildMenuActive={[ROUTES.configurations.path, ROUTES.history.path].some(path =>\r\n                        pathname.includes(path)\r\n                    )}\r\n                >\r\n                    <Link className={'w-full block my-2 px-2'} to={ROUTES.configurations.path}>\r\n                        <Menu.Item\r\n                            className={'text-gray-400'}\r\n                            isMenuCollapsed={isSidebarCollapsed}\r\n                            isActive={pathname.includes(ROUTES.configurations.path)}\r\n                        >\r\n                            Configurations\r\n                        </Menu.Item>\r\n                    </Link>\r\n                    <Link className={'w-full block my-2 px-2'} to={ROUTES.history.path}>\r\n                        <Menu.Item\r\n                            className={'text-gray-400'}\r\n                            isMenuCollapsed={isSidebarCollapsed}\r\n                            isActive={pathname.includes(ROUTES.history.path)}\r\n                        >\r\n                            History\r\n                        </Menu.Item>\r\n                    </Link>\r\n                </Menu.SubMenu>\r\n\r\n                <Link className={'w-full block my-2 px-6'} to={ROUTES.settings.path}>\r\n                    <Menu.Item\r\n                        className={'text-gray-400'}\r\n                        icon={<FontAwesomeIcon icon={'cog'} className='fa-lg' />}\r\n                        isMenuCollapsed={isSidebarCollapsed}\r\n                        isActive={pathname.includes(ROUTES.settings.path)}\r\n                    >\r\n                        Settings\r\n                    </Menu.Item>\r\n                </Link>\r\n            </Menu>\r\n        </>\r\n    );\r\n};\r\n\r\nSidebarMenu.propTypes = {};\r\n\r\nexport default SidebarMenu;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Modal\\Modal.js",["383"],"import styles from './Modal.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { Dialog, Transition } from '@headlessui/react';\r\nimport { Fragment } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Button from '../Button/Button';\r\nimport { BUTTON_TYPES } from '../../../config/constants';\r\nimport classNames from 'classnames';\r\n\r\nconst Modal = props => {\r\n    const {\r\n        children,\r\n        isVisible,\r\n        onClose,\r\n        onOk,\r\n        title,\r\n        showClose,\r\n        showFooter,\r\n        buttonProps: { cancelText = 'Cancel', okText = 'Ok' } = {},\r\n    } = props;\r\n\r\n    return (\r\n        <Transition appear show={isVisible} as={Fragment}>\r\n            <Dialog as='div' className='fixed inset-0 z-50 overflow-y-auto' onClose={onClose}>\r\n                <div className='min-h-screen px-4 text-center'>\r\n                    <Transition.Child\r\n                        as={Fragment}\r\n                        enter='ease-out duration-300'\r\n                        enterFrom='opacity-0'\r\n                        leave='ease-in duration-200'\r\n                        leaveTo='opacity-0'\r\n                    >\r\n                        <Dialog.Overlay\r\n                            className={classNames('fixed inset-0', {\r\n                                'bg-black opacity-50': isVisible,\r\n                            })}\r\n                        />\r\n                    </Transition.Child>\r\n\r\n                    <span className='inline-block h-screen align-middle' aria-hidden='true'>\r\n                        &#8203;\r\n                    </span>\r\n                    <Transition.Child\r\n                        as={Fragment}\r\n                        enter='ease-out duration-300'\r\n                        enterFrom='opacity-0 scale-95'\r\n                        enterTo='opacity-100 scale-100'\r\n                        leave='ease-in duration-200'\r\n                        leaveFrom='opacity-100 scale-100'\r\n                        leaveTo='opacity-0 scale-95'\r\n                    >\r\n                        <div className='inline-block w-full max-w-md my-8 py-4 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-2xl'>\r\n                            {title && (\r\n                                <div className='flex justify-between px-5 pb-3'>\r\n                                    <h1 className='text-2xl text-gray-700 font-medium'>{title}</h1>\r\n                                </div>\r\n                            )}\r\n\r\n                            {showClose && (\r\n                                <FontAwesomeIcon\r\n                                    icon={'times'}\r\n                                    className='absolute right-5 top-5 fa-lg cursor-pointer text-gray-500 hover:text-gray-900 transition duration-200'\r\n                                    onClick={onClose}\r\n                                />\r\n                            )}\r\n\r\n                            {children}\r\n\r\n                            {showFooter && (\r\n                                <div className='flex justify-end px-5 pt-4'>\r\n                                    <Button className={styles.cancelButton} type={BUTTON_TYPES.link} onClick={onClose}>\r\n                                        {cancelText}\r\n                                    </Button>\r\n                                    <Button className={styles.okButton} type={BUTTON_TYPES.primary} onClick={onOk}>\r\n                                        {okText}\r\n                                    </Button>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </Transition.Child>\r\n                </div>\r\n            </Dialog>\r\n        </Transition>\r\n    );\r\n};\r\n\r\nModal.propTypes = {};\r\n\r\nexport default Modal;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Tabs\\TabPane\\TabPane.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Tag\\Tag.js",["384"],"import PropTypes from 'prop-types';\r\n\r\nconst TAG_COLORS = {\r\n    green: 'bg-green-200 border-green-500',\r\n    red: 'bg-red-200 border-red-500',\r\n};\r\n\r\nconst Tag = props => {\r\n    const { color, children, className, ...tagProps } = props;\r\n\r\n    return (\r\n        <span className={`py-0.5 px-2 text-sm rounded border ${TAG_COLORS[color]} ${className}`} {...tagProps}>\r\n            {children}\r\n        </span>\r\n    );\r\n};\r\n\r\nTag.propTypes = {};\r\n\r\nexport default Tag;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Tooltip\\Tooltip.js",[],["385","386"],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Form\\FormItem\\FormItem.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Menu\\SubMenu\\SubMenu.js",["387"],"import { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst SubMenu = props => {\r\n    const { children, className, title, icon, isMenuCollapsed, isAnyChildMenuActive } = props;\r\n\r\n    const [isExpanded, setIsExpanded] = useState(isAnyChildMenuActive);\r\n\r\n    const onSubMenuClick = () => {\r\n        setIsExpanded(expanded => !expanded);\r\n    };\r\n\r\n    return (\r\n        <div className={'w-full my-2 px-6'}>\r\n            <div\r\n                className={classNames(\r\n                    'flex items-center justify-between p-2 pl-3 hover:text-gray-800 hover:bg-gray-100 cursor-pointer whitespace-nowrap transition duration-300 rounded-lg',\r\n                    className,\r\n                    {\r\n                        'bg-gray-100 text-gray-800': isExpanded,\r\n                    }\r\n                )}\r\n                onClick={onSubMenuClick}\r\n            >\r\n                <div>\r\n                    <span className={'text-indigo-600'}>{icon}</span>\r\n                    <span\r\n                        className={classNames('mx-4 text-lg font-normal', {\r\n                            'opacity-0 invisible': isMenuCollapsed,\r\n                            'opacity-100 visible': !isMenuCollapsed,\r\n                        })}\r\n                    >\r\n                        {title}\r\n                    </span>\r\n                </div>\r\n                <FontAwesomeIcon\r\n                    className={classNames('', {\r\n                        'opacity-0 invisible': isMenuCollapsed,\r\n                        'opacity-100 visible': !isMenuCollapsed,\r\n                    })}\r\n                    icon={isExpanded ? 'chevron-up' : 'chevron-down'}\r\n                />\r\n            </div>\r\n            <div\r\n                className={classNames('border-l-2 border-gray-100 ml-6 mt-2', {\r\n                    hidden: isMenuCollapsed || !isExpanded,\r\n                })}\r\n            >\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSubMenu.propTypes = {\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default SubMenu;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Menu\\MenuItem\\MenuItem.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\store.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\config\\axios.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\index.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\types.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\utils\\auth.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\auth.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\auth.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\services\\AuthService.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\config\\env.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\global\\Messages\\Messages.js",["388"],"import styles from './Messages.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { MESSAGE_TYPE } from '../../../config/constants';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ICONS = {\r\n    [MESSAGE_TYPE.success]: 'check-circle',\r\n    [MESSAGE_TYPE.warning]: 'exclamation-circle',\r\n    [MESSAGE_TYPE.error]: 'times',\r\n};\r\n\r\nconst ICONS_STYLE = {\r\n    [MESSAGE_TYPE.success]: 'text-green-500',\r\n    [MESSAGE_TYPE.warning]: 'text-yellow-500',\r\n    [MESSAGE_TYPE.error]: 'text-red-500',\r\n};\r\n\r\nconst Messages = () => {\r\n    const messages = useSelector(state => state.components.messages);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {messages.map(message => {\r\n                return (\r\n                    <div\r\n                        key={message.id}\r\n                        className={`bg-white shadow-md rounded px-5 py-3 flex items-center justify-center my-2`}\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            icon={ICONS[message.type]}\r\n                            className={`fa-lg mr-3 ${ICONS_STYLE[message.type]}`}\r\n                        />\r\n                        <span>{message.message}</span>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nMessages.propTypes = {};\r\n\r\nexport default Messages;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\components.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\components.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Auth\\Register\\Register.js",["389","390","391","392"],"import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport logo from '../../../assets/images/logo.svg';\r\nimport Input from '../../shared/Input/Input';\r\nimport Button from '../../shared/Button/Button';\r\nimport { BUTTON_TYPES, ROUTES } from '../../../config/constants';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport FormItem from '../../shared/Form/FormItem/FormItem';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { register } from '../../../redux/actions/auth';\r\nimport styles from '../Auth.module.scss';\r\n\r\nconst Register = props => {\r\n    const [isShowingPassword, setIsShowingPassword] = useState(false);\r\n\r\n    const onShowPassword = () => {\r\n        setIsShowingPassword(!isShowingPassword);\r\n    };\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onFormSubmit = async values => {\r\n        const user = await dispatch(register(values));\r\n\r\n        if (user) {\r\n            history.push(ROUTES.settings.path);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='flex justify-center w-full max-w-lg'>\r\n            <div className='w-11/12 max-w-sm flex flex-col justify-between'>\r\n                <div className='flex flex-col items-center my-6'>\r\n                    <img className={styles.logo} src={logo} alt='logo' />\r\n                    <h1 className={styles.brandName}>Crypto Trader</h1>\r\n                </div>\r\n                <div>\r\n                    <h2 className={styles.pageTitle}>Register</h2>\r\n                    <form onSubmit={handleSubmit(onFormSubmit)}>\r\n                        <FormItem className='mb-4' label={'First Name'}>\r\n                            <Input type={'text'} placeholder={'First Name'} {...registerFormField('first_name')} />\r\n                        </FormItem>\r\n                        <FormItem className='mb-4' label={'Last Name'}>\r\n                            <Input type={'text'} placeholder={'Last Name'} {...registerFormField('last_name')} />\r\n                        </FormItem>\r\n                        <FormItem className='mb-4' label={'Email'}>\r\n                            <Input type={'email'} placeholder={'Email'} {...registerFormField('email')} />\r\n                        </FormItem>\r\n                        <FormItem className='mb-4' label={'Password'}>\r\n                            <Input.Password placeholder={'Password'} {...registerFormField('password')} />\r\n                        </FormItem>\r\n                        <Button type={BUTTON_TYPES.primary} className={'w-full bg-indigo-600 hover:bg-indigo-700 mt-4'}>\r\n                            Create Account\r\n                        </Button>\r\n                        {/*<div className='text-center'>*/}\r\n                        {/*    <Link to={ROUTES.resetPassword.path}>*/}\r\n                        {/*        <Button className={'mt-2'} type={BUTTON_TYPES.link}>*/}\r\n                        {/*            {'Reset Password?'}*/}\r\n                        {/*        </Button>*/}\r\n                        {/*    </Link>*/}\r\n                        {/*</div>*/}\r\n                    </form>\r\n                </div>\r\n                <div className='text-center text-gray-700 text-lg font-medium my-6'>\r\n                    <span>Already have an account?</span>\r\n                    <Link to={ROUTES.login.path}>\r\n                        <Button className={'ml-1'} type={BUTTON_TYPES.link}>\r\n                            Log in\r\n                        </Button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nRegister.propTypes = {};\r\n\r\nexport default Register;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Auth\\Login\\Login.js",["393","394"],"import styles from '../Auth.module.scss';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport Input from '../../shared/Input/Input';\r\nimport Button from '../../shared/Button/Button';\r\nimport PropTypes from 'prop-types';\r\nimport logo from '../../../assets/images/logo.svg';\r\nimport { BUTTON_TYPES } from '../../../config/constants';\r\nimport { ROUTES } from '../../../config/constants';\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../../../redux/actions/auth';\r\nimport FormItem from '../../shared/Form/FormItem/FormItem';\r\n\r\nconst Login = props => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm();\r\n\r\n    const onFormSubmit = async values => {\r\n        const user = await dispatch(login(values));\r\n\r\n        if (user) {\r\n            history.push(ROUTES.settings.path);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='flex justify-center w-full max-w-lg'>\r\n            <div className='w-11/12 max-w-sm flex flex-col justify-between'>\r\n                <div className='flex flex-col items-center my-6'>\r\n                    <img className={styles.logo} src={logo} alt='logo' />\r\n                    <h1 className={styles.brandName}>Crypto Trader</h1>\r\n                </div>\r\n                <div>\r\n                    <h2 className={styles.pageTitle}>Login</h2>\r\n                    <form onSubmit={handleSubmit(onFormSubmit)}>\r\n                        <FormItem className={'mb-4'} label={'Email'}>\r\n                            <Input type={'text'} placeholder={'Email'} {...registerFormField('email')} />\r\n                        </FormItem>\r\n                        <FormItem className={'mb-4 relative'} label={'Password'}>\r\n                            <Input.Password placeholder={'Password'} {...registerFormField('password')} />\r\n                        </FormItem>\r\n                        <Button type={BUTTON_TYPES.primary} className={'w-full bg-indigo-600 hover:bg-indigo-700 mt-4'}>\r\n                            Sign in\r\n                        </Button>\r\n                        {/*<div className='text-center'>*/}\r\n                        {/*    <Link to={ROUTES.resetPassword.path}>*/}\r\n                        {/*        <Button className={'mt-2'} type={BUTTON_TYPES.link}>*/}\r\n                        {/*            {'Reset Password?'}*/}\r\n                        {/*        </Button>*/}\r\n                        {/*    </Link>*/}\r\n                        {/*</div>*/}\r\n                    </form>\r\n                </div>\r\n                <div className='text-center text-gray-700 text-lg font-medium my-6'>\r\n                    <span>Don't have an account yet?</span>\r\n                    <Link to={ROUTES.register.path}>\r\n                        <Button className={'ml-1'} type={BUTTON_TYPES.link}>\r\n                            Join now\r\n                        </Button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nLogin.propTypes = {};\r\n\r\nexport default Login;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\users.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\services\\UserService.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Spinner\\Spinner.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\global.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\global.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\global\\PasswordConfirmationModal\\PasswordConfirmationModal.js",["395"],"import Modal from '../../shared/Modal/Modal';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { hidePasswordConfirmationModal } from '../../../redux/actions/global';\r\nimport { useForm } from 'react-hook-form';\r\nimport FormItem from '../../shared/Form/FormItem/FormItem';\r\nimport Input from '../../shared/Input/Input';\r\nimport { generateConfirmationToken } from '../../../redux/actions/auth';\r\n\r\nconst PasswordConfirmationModal = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const modalProps = useSelector(state => state.global.passwordConfirmationModalProps);\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { isDirty: hasUnsavedChanged },\r\n    } = useForm({});\r\n\r\n    const { isVisible, successCallback } = modalProps;\r\n\r\n    const onClose = () => {\r\n        dispatch(hidePasswordConfirmationModal());\r\n        resetForm();\r\n    };\r\n\r\n    const onOk = () => {\r\n        handleSubmit(async values => {\r\n            const token = await dispatch(generateConfirmationToken(values.password));\r\n\r\n            if (token) {\r\n                if (successCallback) {\r\n                    successCallback();\r\n                }\r\n\r\n                dispatch(hidePasswordConfirmationModal());\r\n                resetForm();\r\n            }\r\n        })();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        reset({ password: '' });\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            isVisible={isVisible}\r\n            onClose={onClose}\r\n            onOk={onOk}\r\n            title={'Confirm Password'}\r\n            buttonProps={{\r\n                okText: 'Confirm',\r\n            }}\r\n            showClose\r\n            showFooter\r\n        >\r\n            <div className='px-5 py-7 border-b border-t border-gray-200'>\r\n                <FormItem label={'Password'}>\r\n                    <Input.Password placeholder={'Password'} {...registerFormField('password')} />\r\n                </FormItem>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default PasswordConfirmationModal;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\reducers\\configurations.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Input\\PasswordInput.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Auth\\AuthPage.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\redux\\actions\\configurations.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\EditConfigurationDrawer\\EditConfigurationDrawer.js",["396","397","398"],"import PropTypes from 'prop-types';\r\nimport { useEffect, useState } from 'react';\r\nimport Drawer from '../../shared/Drawer/Drawer';\r\nimport { DRAWER_SIDE, FUTURES_POSITION_SIDES, FUTURES_MANAGE_PROFIT_TYPES } from '../../../config/constants';\r\nimport Tag from '../../shared/Tag/Tag';\r\nimport FormItem from '../../shared/Form/FormItem/FormItem';\r\nimport Input from '../../shared/Input/Input';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Button from '../../shared/Button/Button';\r\nimport Switch from '../../shared/Switch/Switch';\r\nimport { useForm } from 'react-hook-form';\r\nimport classNames from 'classnames';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateConfiguration } from '../../../redux/actions/configurations';\r\nimport useModal from '../../../hooks/useModal';\r\nimport NameUpdateModal from './NameUpdateModal/NameUpdateModal';\r\n\r\nconst getConfigurationFormFields = configuration => {\r\n    return {\r\n        futures_trade_amount: configuration.futures_trade_amount,\r\n        futures_leverage: configuration.futures_leverage,\r\n        futures_take_profit_percentage: configuration.futures_take_profit_percentage,\r\n        futures_stop_loss_percentage: configuration.futures_stop_loss_percentage,\r\n        futures_daily_trades: configuration.futures_daily_trades,\r\n        futures_position_side: configuration.futures_position_side || FUTURES_POSITION_SIDES.all,\r\n        futures_manage_profit: configuration.futures_manage_profit || FUTURES_POSITION_SIDES.all,\r\n        concurrent_trades: configuration.concurrent_trades || 1,\r\n    };\r\n};\r\n\r\nconst EditConfigurationDrawer = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector(state => state.auth.user);\r\n\r\n    const { isVisible, closeDrawer, configuration } = props;\r\n\r\n    const { name } = configuration;\r\n    const { active_configuration } = user;\r\n\r\n    const isActive = configuration.id === active_configuration;\r\n\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [isSpotEnabled, setIsSpotEnabled] = useState(configuration.is_spot_enabled);\r\n    const [isFuturesEnabled, setIsFuturesEnabled] = useState(configuration.is_futures_enabled);\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { isDirty: hasUnsavedChanged },\r\n    } = useForm({\r\n        defaultValues: getConfigurationFormFields(configuration),\r\n    });\r\n\r\n    const [isNameUpdateModalVisible, showNameUpdateModal, hideNameUpdateModal] = useModal();\r\n\r\n    useEffect(() => {\r\n        setIsSpotEnabled(configuration.is_spot_enabled);\r\n        setIsFuturesEnabled(configuration.is_futures_enabled);\r\n        reset(getConfigurationFormFields(configuration));\r\n    }, [configuration]);\r\n\r\n    const onEditClick = () => {\r\n        setIsEditing(true);\r\n    };\r\n\r\n    const onDiscardClick = () => {\r\n        setIsEditing(false);\r\n        reset(getConfigurationFormFields(configuration));\r\n    };\r\n\r\n    const onSaveClick = () => {\r\n        handleSubmit(async values => {\r\n            values.id = configuration.id;\r\n            values.is_spot_enabled = isSpotEnabled;\r\n            values.is_futures_enabled = isFuturesEnabled;\r\n\r\n            const updatedConfiguration = await dispatch(updateConfiguration(values));\r\n\r\n            if (updatedConfiguration) {\r\n                setIsEditing(false);\r\n            }\r\n        })();\r\n    };\r\n\r\n    const onEditNameClick = () => {\r\n        showNameUpdateModal();\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            side={DRAWER_SIDE.right}\r\n            isVisible={isVisible}\r\n            onClose={closeDrawer}\r\n            header={\r\n                <div className={'flex justify-between items-center w-full'}>\r\n                    <span className={'text-2xl font-medium'}>Configuration</span>\r\n                    {isEditing ? (\r\n                        <div>\r\n                            <Button type={'link'} className={'mr-5'} onClick={onDiscardClick}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button type={'primary'} className={'bg-indigo-600 p-2 mr-5'} onClick={onSaveClick}>\r\n                                Save\r\n                            </Button>\r\n                        </div>\r\n                    ) : (\r\n                        <Button type={'primary'} className={'bg-indigo-600 p-2 mr-5'} onClick={onEditClick}>\r\n                            Edit\r\n                        </Button>\r\n                    )}\r\n                </div>\r\n            }\r\n        >\r\n            <div>\r\n                <div className='flex items-center justify-between mb-7 md:mb-12'>\r\n                    <div className='flex items-center'>\r\n                        <h1 className='md:text-2xl mr-3'>{name}</h1>\r\n                        <FontAwesomeIcon\r\n                            icon='pencil-alt'\r\n                            className='text-gray-700 fa-sm md:fa-md cursor-pointer'\r\n                            onClick={onEditNameClick}\r\n                        />\r\n                        <NameUpdateModal\r\n                            isVisible={isNameUpdateModalVisible}\r\n                            hideModal={hideNameUpdateModal}\r\n                            configurationId={configuration.id}\r\n                            configurationName={configuration.name}\r\n                        />\r\n                    </div>\r\n                    {isActive ? <Tag color={'green'}>Active</Tag> : <Tag color={'red'}>Inactive</Tag>}\r\n                </div>\r\n\r\n                <div className='mb-8 bg-white p-5 rounded-md shadow'>\r\n                    <div className='flex items-center justify-between mb-6'>\r\n                        <h1 className='text-xl mr-10'>Spot</h1>\r\n                        <Switch checked={false} onChange={setIsSpotEnabled} disabled={true} />\r\n                    </div>\r\n                    <div className='sm:flex mb-5'>\r\n                        <FormItem\r\n                            label={'Trade Amount'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2 sm:mr-8'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={1}\r\n                                disabled={!isSpotEnabled || !isEditing}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label={'Take Profit Percentage'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={0.1}\r\n                                disabled={!isSpotEnabled || !isEditing}\r\n                            />\r\n                        </FormItem>\r\n                    </div>\r\n                    <div className='sm:flex'>\r\n                        <FormItem\r\n                            label={'Stop Loss Percentage'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2 sm:mr-8'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={0.1}\r\n                                disabled={!isSpotEnabled || !isEditing}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label={'Daily Trade Limit'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={1}\r\n                                step={1}\r\n                                disabled={!isSpotEnabled || !isEditing}\r\n                            />\r\n                        </FormItem>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='mb-8 bg-white p-5 rounded-md shadow'>\r\n                    <div className='flex items-center justify-between mb-6'>\r\n                        <h1 className='text-xl mr-10'>Futures</h1>\r\n                        <Switch checked={isFuturesEnabled} onChange={setIsFuturesEnabled} disabled={!isEditing} />\r\n                    </div>\r\n                    <div className='sm:flex mb-5'>\r\n                        <FormItem\r\n                            label={'Trade Amount'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2 sm:mr-8'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={1}\r\n                                disabled={!isFuturesEnabled || !isEditing}\r\n                                {...registerFormField('futures_trade_amount')}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label={'Leverage'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={1}\r\n                                max={125}\r\n                                step={1}\r\n                                disabled={!isFuturesEnabled || !isEditing}\r\n                                {...registerFormField('futures_leverage')}\r\n                            />\r\n                        </FormItem>\r\n                    </div>\r\n                    <div className='sm:flex mb-5'>\r\n                        <FormItem\r\n                            label={'Take Profit Percentage'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2 sm:mr-8'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={0.1}\r\n                                disabled={!isFuturesEnabled || !isEditing}\r\n                                {...registerFormField('futures_take_profit_percentage')}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label={'Stop Loss Percentage'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={0.1}\r\n                                disabled={!isFuturesEnabled || !isEditing}\r\n                                {...registerFormField('futures_stop_loss_percentage')}\r\n                            />\r\n                        </FormItem>\r\n                    </div>\r\n                    <div className='sm:flex mb-5'>\r\n                        <FormItem\r\n                            label={'Daily Trade Limit'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2 sm:mr-8'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={1}\r\n                                step={1}\r\n                                disabled={!isFuturesEnabled || !isEditing}\r\n                                {...registerFormField('futures_daily_trades')}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem\r\n                            label={'Position side'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2'}\r\n                        >\r\n                            <select\r\n                                className={classNames(\r\n                                    'h-8 w-full border border-gray-200 rounded focus:ring focus:ring-indigo-300 px-2 py-1 outline-none'\r\n                                )}\r\n                                disabled={!isFuturesEnabled || !isEditing}\r\n                                {...registerFormField('futures_position_side')}\r\n                            >\r\n                                <option value={FUTURES_POSITION_SIDES.all}>Both</option>\r\n                                <option value={FUTURES_POSITION_SIDES.long}>Long</option>\r\n                                <option value={FUTURES_POSITION_SIDES.short}>Short</option>\r\n                            </select>\r\n                        </FormItem>\r\n                    </div>\r\n                    <div className='sm:flex'>\r\n                        <FormItem\r\n                            label={'Manage profit'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'mb-4 sm:mb-0 sm:w-1/2'}\r\n                        >\r\n                            <select\r\n                                className={\r\n                                    'h-8 w-full border border-gray-200 rounded focus:ring focus:ring-indigo-300 px-2 py-1 outline-none'\r\n                                }\r\n                                disabled={!isFuturesEnabled || !isEditing}\r\n                                {...registerFormField('futures_manage_profit')}\r\n                            >\r\n                                <option value={FUTURES_MANAGE_PROFIT_TYPES.accumulate}>Accumulate profit</option>\r\n                                <option value={FUTURES_MANAGE_PROFIT_TYPES.transferToSpot}>\r\n                                    Transfer to Spot wallet\r\n                                </option>\r\n                            </select>\r\n                        </FormItem>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='mb-8 bg-white p-5 rounded-md shadow'>\r\n                    <h1 className='text-xl mb-6'>Global</h1>\r\n                    <div className='flex sm:pr-7'>\r\n                        <FormItem\r\n                            label={'Concurrent Trades Limit'}\r\n                            helpMessage={'Please fill out this field'}\r\n                            className={'w-full sm:w-1/2'}\r\n                        >\r\n                            <Input\r\n                                type={'number'}\r\n                                className={'h-8 w-full'}\r\n                                min={1}\r\n                                step={1}\r\n                                {...registerFormField('concurrent_trades')}\r\n                            />\r\n                        </FormItem>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nEditConfigurationDrawer.propTypes = {};\r\n\r\nexport default EditConfigurationDrawer;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\NewConfiguration\\Modal\\Modal.js",["399","400"],"import PropTypes from 'prop-types';\r\nimport ModalComponent from '../../../shared/Modal/Modal';\r\nimport Input from '../../../shared/Input/Input';\r\nimport FormItem from '../../../shared/Form/FormItem/FormItem';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createConfiguration } from '../../../../redux/actions/configurations';\r\n\r\nconst Modal = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { isVisible, hideModal } = props;\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { isDirty: hasUnsavedChanged },\r\n    } = useForm({});\r\n\r\n    const onClose = () => {\r\n        hideModal();\r\n        resetForm();\r\n    };\r\n\r\n    const onOk = () => {\r\n        handleSubmit(async values => {\r\n            const configuration = await dispatch(createConfiguration(values));\r\n\r\n            if (configuration) {\r\n                hideModal();\r\n                resetForm();\r\n            }\r\n        })();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        reset({ name: '' });\r\n    };\r\n\r\n    return (\r\n        <ModalComponent\r\n            isVisible={isVisible}\r\n            onClose={onClose}\r\n            onOk={onOk}\r\n            title={'Create configuration'}\r\n            buttonProps={{\r\n                okText: 'Create',\r\n            }}\r\n            showClose\r\n            showFooter\r\n        >\r\n            <div className='px-5 py-7 border-b border-t border-gray-200'>\r\n                <FormItem label={'Name'}>\r\n                    <Input type={'text'} placeholder={'Name'} {...registerFormField('name')} />\r\n                </FormItem>\r\n            </div>\r\n        </ModalComponent>\r\n    );\r\n};\r\n\r\nModal.propTypes = {};\r\n\r\nexport default Modal;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Telegram.js",["401"],"import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport Button from '../../shared/Button/Button';\r\nimport classNames from 'classnames';\r\nimport Steps from './Steps/Steps';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Connected from './Connected/Connected';\r\nimport { connectTelegram } from '../../../redux/actions/users';\r\n\r\nconst STEPS = {\r\n    startBot: 1,\r\n    copyId: 2,\r\n    enterId: 3,\r\n};\r\n\r\nconst Telegram = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector(state => state.auth.user);\r\n\r\n    const [currentStep, setCurrentStep] = useState(STEPS.startBot);\r\n    const [telegramId, setTelegramId] = useState('');\r\n\r\n    const onNextStepClick = async () => {\r\n        if (currentStep === STEPS.enterId) {\r\n            const updatedUser = await dispatch(connectTelegram({ telegram_id: telegramId, id: user.id }));\r\n\r\n            if (updatedUser) {\r\n                setCurrentStep(STEPS.startBot);\r\n                setTelegramId('');\r\n            }\r\n        } else {\r\n            setCurrentStep(step => step + 1);\r\n        }\r\n    };\r\n\r\n    const onPreviousStepClick = () => {\r\n        setCurrentStep(step => step - 1);\r\n    };\r\n\r\n    return (\r\n        <div className='h-full flex flex-col'>\r\n            <h1 className='text-2xl text-gray-800 font-medium pb-6 mb-10 border-b border-gray-300'>Telegram</h1>\r\n            <div className='bg-white p-5 rounded-md shadow flex flex-col justify-between'>\r\n                {user.telegram_id ? (\r\n                    <Connected telegramId={user.telegram_id} telegramUsername={user.telegram_username} />\r\n                ) : (\r\n                    <>\r\n                        <div>\r\n                            <div className='bg-gray-100 xl:flex items-center justify-between rounded-md p-3 mb-5'>\r\n                                <div\r\n                                    className='flex items-center cursor-pointer'\r\n                                    onClick={() => setCurrentStep(STEPS.startBot)}\r\n                                >\r\n                                    <span\r\n                                        className={classNames(\r\n                                            'rounded-full shadow w-8 h-8 font-semibold mr-2 flex justify-center items-center cursor-pointer',\r\n                                            {\r\n                                                'bg-indigo-600 text-white': currentStep === STEPS.startBot,\r\n                                                'bg-green-400 text-white': currentStep > STEPS.startBot,\r\n                                            }\r\n                                        )}\r\n                                    >\r\n                                        {STEPS.startBot}\r\n                                    </span>\r\n                                    <span\r\n                                        className={classNames('cursor-pointer', {\r\n                                            'text-indigo-700': currentStep === STEPS.startBot,\r\n                                            'text-green-500': currentStep > STEPS.startBot,\r\n                                        })}\r\n                                    >\r\n                                        Start bot\r\n                                    </span>\r\n                                </div>\r\n                                <FontAwesomeIcon\r\n                                    icon={currentStep > STEPS.startBot ? 'grip-lines' : 'ellipsis-h'}\r\n                                    className={classNames(\r\n                                        'text-gray-400 transform rotate-90 xl:rotate-0 ml-2 xl:ml-0',\r\n                                        {\r\n                                            'text-green-500': currentStep > STEPS.startBot,\r\n                                        }\r\n                                    )}\r\n                                />\r\n                                <div\r\n                                    className='flex items-center cursor-pointer'\r\n                                    onClick={() => setCurrentStep(STEPS.copyId)}\r\n                                >\r\n                                    <span\r\n                                        className={classNames(\r\n                                            'rounded-full shadow w-8 h-8 font-semibold mr-2 flex justify-center items-center cursor-pointer',\r\n                                            {\r\n                                                'bg-white text-indigo-600': currentStep < STEPS.copyId,\r\n                                                'bg-indigo-600 text-white': currentStep === STEPS.copyId,\r\n                                                'bg-green-400 text-white': currentStep > STEPS.copyId,\r\n                                            }\r\n                                        )}\r\n                                    >\r\n                                        {STEPS.copyId}\r\n                                    </span>\r\n                                    <span\r\n                                        className={classNames('cursor-pointer', {\r\n                                            'text-indigo-700': currentStep === STEPS.copyId,\r\n                                            'text-green-500': currentStep > STEPS.copyId,\r\n                                        })}\r\n                                    >\r\n                                        Copy Telegram ID\r\n                                    </span>\r\n                                </div>\r\n                                <FontAwesomeIcon\r\n                                    icon={currentStep > STEPS.copyId ? 'grip-lines' : 'ellipsis-h'}\r\n                                    className={classNames(\r\n                                        'text-gray-400 transform rotate-90 xl:rotate-0 ml-2 xl:ml-0',\r\n                                        {\r\n                                            'text-green-500': currentStep > STEPS.copyId,\r\n                                        }\r\n                                    )}\r\n                                />\r\n                                <div\r\n                                    className='flex items-center cursor-pointer'\r\n                                    onClick={() => setCurrentStep(STEPS.enterId)}\r\n                                >\r\n                                    <span\r\n                                        className={classNames(\r\n                                            'rounded-full shadow w-8 h-8 font-semibold mr-2 flex justify-center items-center cursor-pointer',\r\n                                            {\r\n                                                'bg-indigo-600 text-white': currentStep === STEPS.enterId,\r\n                                                'bg-white text-indigo-600': currentStep < STEPS.enterId,\r\n                                            }\r\n                                        )}\r\n                                    >\r\n                                        {STEPS.enterId}\r\n                                    </span>\r\n                                    <span\r\n                                        className={classNames('cursor-pointer', {\r\n                                            'text-indigo-700': currentStep === STEPS.enterId,\r\n                                            'text-green-500': currentStep > STEPS.enterId,\r\n                                        })}\r\n                                    >\r\n                                        Enter Telegram ID\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                            <Steps\r\n                                steps={STEPS}\r\n                                currentStep={currentStep}\r\n                                telegramId={telegramId}\r\n                                setTelegramId={setTelegramId}\r\n                            />\r\n                        </div>\r\n                        <div className='flex flex-col justify-center items-center'>\r\n                            <Button\r\n                                className={'bg-indigo-600 hover:bg-indigo-700'}\r\n                                type={'primary'}\r\n                                onClick={onNextStepClick}\r\n                            >\r\n                                {currentStep === STEPS.enterId ? 'Connect' : 'Next'}\r\n                            </Button>\r\n                            <Button\r\n                                className={classNames('mt-3', {\r\n                                    invisible: currentStep === STEPS.startBot,\r\n                                })}\r\n                                type={'link'}\r\n                                onClick={onPreviousStepClick}\r\n                            >\r\n                                Go back\r\n                            </Button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTelegram.propTypes = {};\r\n\r\nexport default Telegram;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Security\\Security.js",["402","403"],"import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../../shared/Button/Button';\r\nimport { BUTTON_TYPES } from '../../../config/constants';\r\nimport useModal from '../../../hooks/useModal';\r\nimport { useDispatch } from 'react-redux';\r\nimport { showPasswordConfirmationModal } from '../../../redux/actions/global';\r\nimport PasswordUpdateModal from './PasswordUpdateModal/PasswordUpdateModal';\r\n\r\nconst Security = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [isPasswordUpdateModalVisible, showPasswordUpdateModal, hidePasswordUpdateModal] = useModal();\r\n\r\n    const onEditPasswordClick = () => {\r\n        dispatch(showPasswordConfirmationModal(handlePasswordUpdate));\r\n    };\r\n\r\n    const handlePasswordUpdate = () => {\r\n        showPasswordUpdateModal();\r\n    };\r\n\r\n    return (\r\n        <div className='h-full flex flex-col'>\r\n            <h1 className='text-2xl text-gray-800 font-medium pb-6 mb-10 border-b border-gray-300'>Security</h1>\r\n            <div className='flex justify-between items-center bg-white p-5 rounded-md'>\r\n                <span>Password</span>\r\n                <Button type={BUTTON_TYPES.primary} className={'bg-indigo-600 w-32'} onClick={onEditPasswordClick}>\r\n                    Edit\r\n                </Button>\r\n                <PasswordUpdateModal isVisible={isPasswordUpdateModalVisible} hideModal={hidePasswordUpdateModal} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSecurity.propTypes = {};\r\n\r\nexport default Security;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\AccountSettings\\AccountSettings.js",["404","405","406"],"import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport Input from '../../shared/Input/Input';\r\nimport Button from '../../shared/Button/Button';\r\nimport { BUTTON_TYPES, MESSAGE_TYPE, ROUTES } from '../../../config/constants';\r\nimport FormItem from '../../shared/Form/FormItem/FormItem';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteUser, updateUser } from '../../../redux/actions/users';\r\nimport { setUserLoggedOut } from '../../../redux/actions/auth';\r\nimport { deleteAuthToken } from '../../../utils/auth';\r\nimport classNames from 'classnames';\r\nimport { showMessageComponent } from '../../../redux/actions/components';\r\n\r\nconst AccountSettings = props => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const user = useSelector(state => state.auth.user);\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { isDirty: hasUnsavedChanged },\r\n    } = useForm({\r\n        defaultValues: {\r\n            first_name: user.first_name,\r\n            last_name: user.last_name,\r\n            email: user.email,\r\n            api_key: user.api_key,\r\n            secret_key: user.secret_key,\r\n        },\r\n    });\r\n\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const toggleIsEditing = () => {\r\n        setIsEditing(isEditing => !isEditing);\r\n    };\r\n\r\n    const onEditClick = () => {\r\n        toggleIsEditing();\r\n    };\r\n\r\n    const onDiscardClick = () => {\r\n        reset(user);\r\n        toggleIsEditing();\r\n    };\r\n\r\n    const onSaveClick = async values => {\r\n        if (!hasUnsavedChanged) return;\r\n\r\n        const updatedUser = await dispatch(updateUser({ id: user.id, ...values }));\r\n\r\n        if (updatedUser) {\r\n            reset(updatedUser);\r\n            toggleIsEditing();\r\n        }\r\n    };\r\n\r\n    const onDeleteAccountClick = async () => {\r\n        const deletedUser = await dispatch(deleteUser(user.id));\r\n\r\n        if (deletedUser) {\r\n            dispatch(setUserLoggedOut());\r\n            deleteAuthToken();\r\n            history.push(ROUTES.login.path);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='h-full flex flex-col'>\r\n            <h1 className='text-2xl text-gray-800 font-medium pb-6 mb-10 border-b border-gray-300'>Account Settings</h1>\r\n            <div>\r\n                <div className='bg-white p-5 rounded-md shadow mb-10'>\r\n                    <h2 className='mb-7 text-xl text-gray-800'>Personal Information</h2>\r\n                    <div className='flex-col'>\r\n                        <div className='sm:flex mb-6'>\r\n                            <div className='flex flex-col sm:w-1/2 sm:mr-6 mb-6 sm:mb-0'>\r\n                                <FormItem label={'First name'}>\r\n                                    <Input\r\n                                        className={'border-gray-200 text-gray-700 w-full'}\r\n                                        type={'text'}\r\n                                        placeholder={'First name'}\r\n                                        disabled={!isEditing}\r\n                                        {...registerFormField('first_name')}\r\n                                    />\r\n                                </FormItem>\r\n                            </div>\r\n                            <div className='flex flex-col sm:w-1/2'>\r\n                                <FormItem label={'Last Name'}>\r\n                                    <Input\r\n                                        className={'border-gray-200 text-gray-700 w-full'}\r\n                                        type={'text'}\r\n                                        placeholder={'Last name'}\r\n                                        disabled={!isEditing}\r\n                                        {...registerFormField('last_name')}\r\n                                    />\r\n                                </FormItem>\r\n                            </div>\r\n                        </div>\r\n                        <div className='flex flex-col'>\r\n                            <FormItem label={'Email'}>\r\n                                <Input\r\n                                    className={'border-gray-200 text-gray-700 w-full'}\r\n                                    type={'email'}\r\n                                    placeholder={'Email'}\r\n                                    disabled={!isEditing}\r\n                                    {...registerFormField('email')}\r\n                                />\r\n                            </FormItem>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='bg-white p-5 rounded-md shadow mb-10'>\r\n                    <h2 className='mb-7 text-xl text-black'>Binance API</h2>\r\n                    <div className='sm:flex mb-7'>\r\n                        <div className='flex flex-col sm:w-1/2 sm:mr-6 mb-6'>\r\n                            <FormItem label={'API key'}>\r\n                                <Input\r\n                                    className={'border-gray-200 text-gray-700 w-full'}\r\n                                    type={'text'}\r\n                                    placeholder={'API key'}\r\n                                    disabled={!isEditing}\r\n                                    {...registerFormField('api_key')}\r\n                                />\r\n                            </FormItem>\r\n                        </div>\r\n                        <div className='flex flex-col sm:w-1/2'>\r\n                            <FormItem label={'Secret Key'}>\r\n                                <Input\r\n                                    className={'border-gray-200 text-gray-700 w-full'}\r\n                                    type={'text'}\r\n                                    placeholder={'Secret Key'}\r\n                                    disabled={!isEditing}\r\n                                    {...registerFormField('secret_key')}\r\n                                />\r\n                            </FormItem>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='flex justify-end'>\r\n                    <Button\r\n                        className={'bg-red-600 hover:bg-red-700 focus:bg-red-700 w-40 justify-self-end'}\r\n                        type={BUTTON_TYPES.primary}\r\n                        disabled\r\n                        onClick={onDeleteAccountClick}\r\n                    >\r\n                        Delete Account\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className='border-t border-gray-300 pt-8 mt-9'>\r\n                <div className='flex justify-end'>\r\n                    {!isEditing && (\r\n                        <Button className={'w-56 rounded bg-indigo-700'} type={'primary'} onClick={onEditClick}>\r\n                            Edit\r\n                        </Button>\r\n                    )}\r\n\r\n                    <div\r\n                        className={classNames('flex justify-end w-full xl:w-10/12', {\r\n                            hidden: !isEditing,\r\n                        })}\r\n                    >\r\n                        <Button type={'link'} onClick={onDiscardClick}>\r\n                            Discard changes\r\n                        </Button>\r\n                        <Button\r\n                            className={'w-32 ml-6 lg:w-56 rounded bg-indigo-700'}\r\n                            type={'primary'}\r\n                            htmlType={'submit'}\r\n                            disabled={!hasUnsavedChanged}\r\n                            onClick={() => handleSubmit(onSaveClick)()}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nAccountSettings.propTypes = {};\r\n\r\nexport default AccountSettings;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\AccountSettings\\Select\\Select.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\services\\ConfigurationService.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Security\\PasswordUpdateModal\\PasswordUpdateModal.js",["407","408","409"],"import PropTypes from 'prop-types';\r\nimport Modal from '../../../shared/Modal/Modal';\r\nimport Input from '../../../shared/Input/Input';\r\nimport FormItem from '../../../shared/Form/FormItem/FormItem';\r\nimport { useForm } from 'react-hook-form';\r\nimport { updatePassword } from '../../../../redux/actions/users';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ModalComponent from '../../../shared/Modal/Modal';\r\n\r\nconst PasswordUpdateModal = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector(state => state.auth.user);\r\n\r\n    const { isVisible, hideModal } = props;\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { isDirty: hasUnsavedChanged },\r\n    } = useForm({});\r\n\r\n    const onClose = () => {\r\n        hideModal();\r\n        resetForm();\r\n    };\r\n\r\n    const onOk = () => {\r\n        handleSubmit(async values => {\r\n            const updatedUser = await dispatch(updatePassword({ ...values, id: user.id }));\r\n\r\n            if (updatedUser) {\r\n                hideModal();\r\n                resetForm();\r\n            }\r\n        })();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        reset({ password: '' });\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            isVisible={isVisible}\r\n            onClose={onClose}\r\n            onOk={onOk}\r\n            title={'Update password'}\r\n            buttonProps={{\r\n                okText: 'Update',\r\n            }}\r\n            showClose\r\n            showFooter\r\n        >\r\n            <div className='px-5 py-7 border-b border-t border-gray-200'>\r\n                <FormItem label={'Password'}>\r\n                    <Input.Password placeholder={'Password'} {...registerFormField('password')} />\r\n                </FormItem>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nPasswordUpdateModal.propTypes = {};\r\n\r\nexport default PasswordUpdateModal;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Configurations\\EditConfigurationDrawer\\NameUpdateModal\\NameUpdateModal.js",["410","411","412"],"import PropTypes from 'prop-types';\r\nimport Modal from '../../../shared/Modal/Modal';\r\nimport Input from '../../../shared/Input/Input';\r\nimport FormItem from '../../../shared/Form/FormItem/FormItem';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateConfiguration } from '../../../../redux/actions/configurations';\r\nimport { useEffect } from 'react';\r\n\r\nconst NameUpdateModal = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { isVisible, hideModal, configurationId, configurationName } = props;\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { isDirty: hasUnsavedChanged },\r\n    } = useForm({});\r\n\r\n    useEffect(() => {\r\n        reset({ name: configurationName });\r\n    }, [configurationName]);\r\n\r\n    const onClose = () => {\r\n        hideModal();\r\n    };\r\n\r\n    const onOk = () => {\r\n        handleSubmit(async values => {\r\n            const updatedConfiguration = await dispatch(updateConfiguration({ ...values, id: configurationId }));\r\n\r\n            if (updatedConfiguration) {\r\n                hideModal();\r\n            }\r\n        })();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            isVisible={isVisible}\r\n            onClose={onClose}\r\n            onOk={onOk}\r\n            title={'Update name'}\r\n            buttonProps={{\r\n                okText: 'Update',\r\n            }}\r\n            showClose\r\n            showFooter\r\n        >\r\n            <div className='px-5 py-7 border-b border-t border-gray-200'>\r\n                <FormItem label={'Name'}>\r\n                    <Input placeholder={'Name'} {...registerFormField('name')} />\r\n                </FormItem>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nNameUpdateModal.propTypes = {};\r\n\r\nexport default NameUpdateModal;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Switch\\Switch.js",["413"],"import PropTypes from 'prop-types';\r\nimport { Switch as SwitchComponent } from '@headlessui/react';\r\nimport classNames from 'classnames';\r\n\r\nconst Switch = props => {\r\n    const { checked, onChange, disabled } = props;\r\n\r\n    const handleChange = checked => {\r\n        if (disabled) return;\r\n\r\n        onChange(checked);\r\n    };\r\n\r\n    return (\r\n        <SwitchComponent\r\n            checked={checked}\r\n            onChange={handleChange}\r\n            className={classNames(\r\n                'relative inline-flex flex-shrink-0 h-6 w-14 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus-visible:ring-2  focus-visible:ring-white focus-visible:ring-opacity-75',\r\n                { 'bg-green-300': checked, 'bg-gray-300': !checked }\r\n            )}\r\n        >\r\n            <span\r\n                aria-hidden='true'\r\n                className={classNames(\r\n                    'pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow-lg transform ring-0 transition ease-in-out duration-200',\r\n                    {\r\n                        'translate-x-8': checked,\r\n                        'translate-x-0': !checked,\r\n                    }\r\n                )}\r\n            />\r\n        </SwitchComponent>\r\n    );\r\n};\r\n\r\nSwitch.propTypes = {};\r\n\r\nexport default Switch;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Connected\\Connected.js",["414"],"import styles from './Connected.module.scss';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '../../../shared/Button/Button';\r\nimport { BUTTON_TYPES } from '../../../../config/constants';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { disconnectTelegram } from '../../../../redux/actions/users';\r\nimport { showPasswordConfirmationModal } from '../../../../redux/actions/global';\r\n\r\nconst Connected = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector(state => state.auth.user);\r\n\r\n    const { telegramId, telegramUsername } = props;\r\n\r\n    const onDisconnectClick = () => {\r\n        dispatch(showPasswordConfirmationModal(handleTelegramDisconnect));\r\n    };\r\n\r\n    const handleTelegramDisconnect = () => {\r\n        dispatch(disconnectTelegram(user.id));\r\n    };\r\n\r\n    return (\r\n        <div className={'my-4'}>\r\n            <h2 className='text-gray-700 text-2xl text-center font-medium'>Telegram notifications is turned on</h2>\r\n            <div className='flex items-center flex-wrap mt-8 text-lg'>\r\n                <span className='font-medium mr-5'>Telegram ID:</span>\r\n                <span>{telegramId}</span>\r\n            </div>\r\n            {telegramUsername && (\r\n                <div className='flex items-center flex-wrap mt-8 text-lg'>\r\n                    <span className='font-medium mr-5'>Username:</span>\r\n                    <span>{telegramUsername}</span>\r\n                </div>\r\n            )}\r\n            <div className={'flex justify-center mt-8'}>\r\n                <Button className={styles.disconnectButton} type={BUTTON_TYPES.primary} onClick={onDisconnectClick}>\r\n                    Disconnect\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nConnected.propTypes = {};\r\n\r\nexport default Connected;\r\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Steps\\Steps.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Steps\\StartBot\\StartBot.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Steps\\CopyTelegramID\\CopyTelegramID.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\Settings\\Telegram\\Steps\\EnterTelegramID\\EnterTelegramID.js",[],"C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\History\\History.js",["415"],"import PropTypes from 'prop-types';\nimport Table from '../shared/Table/Table';\n\nconst data = [\n    {\n        key: '1',\n        name: 'John',\n        address: 'New York',\n    },\n    {\n        key: '2',\n        name: 'Jim',\n        address: 'London',\n    },\n    {\n        key: '3',\n        name: 'David',\n        address: 'Sidney',\n    },\n];\n\nconst History = props => {\n    return (\n        <Table\n            dataSource={data}\n            // titles={['Name', 'Address']}\n        >\n            <Table.Column title={'Name'} dataIndex={'name'} />\n            <Table.Column title={'Address'} dataIndex={'address'} />\n        </Table>\n    );\n};\n\nHistory.propTypes = {};\n\nexport default History;\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Table\\Table.js",["416","417"],"import PropTypes from 'prop-types';\nimport Column from './Column/Column';\n\nconst Table = props => {\n    const { children, dataSource, ...tableProps } = props;\n\n    // console.log(children);\n\n    let dataIndex = children.map(column => column.props.dataIndex);\n    console.log(dataIndex);\n\n    return (\n        <div className='flex flex-col px-5 py-8'>\n            <div className='-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8'>\n                <div className='py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8'>\n                    <div className='shadow overflow-hidden border-b border-gray-200 sm:rounded-lg'>\n                        <table className='min-w-full divide-y divide-gray-200'>\n                            <thead className='bg-gray-50'>\n                                {children.map(column => (\n                                    <th\n                                        scope='col'\n                                        className='px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider'\n                                    >\n                                        {column.props.title}\n                                    </th>\n                                ))}\n                            </thead>\n                            <tbody className='bg-white divide-y divide-gray-200'>\n                                <td className='whitespace-nowrap divide-y divide-gray-200'>\n                                    {dataSource.map(data => (\n                                        <tr className='px-6 py-4 flex whitespace-nowrap '>\n                                            <div className='flex items-center'>\n                                                <div className='text-sm font-medium text-gray-900'>\n                                                    {data[dataIndex]}\n                                                </div>\n                                            </div>\n                                        </tr>\n                                    ))}\n                                </td>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nTable.propTypes = {};\n\nTable.Column = Column;\n\nexport default Table;\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\shared\\Table\\Column\\Column.js",["418","419","420"],"import PropTypes from 'prop-types';\nimport Table from '../Table';\n\nconst Column = props => {\n    const { title, dataIndex, ...columnProps } = props;\n\n    return <></>;\n};\n\nColumn.propTypes = {};\n\nexport default Column;\n","C:\\Users\\FARHAD\\Documents\\GitHub\\crypto-trader\\client\\src\\components\\global\\ActionConfirmModal\\ActionConfirmModal.js",[],{"ruleId":"421","replacedBy":"422"},{"ruleId":"423","replacedBy":"424"},{"ruleId":"425","severity":1,"message":"426","line":3,"column":8,"nodeType":"427","messageId":"428","endLine":3,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"429","line":2,"column":27,"nodeType":"427","messageId":"428","endLine":2,"endColumn":31},{"ruleId":"425","severity":1,"message":"430","line":3,"column":23,"nodeType":"427","messageId":"428","endLine":3,"endColumn":29},{"ruleId":"425","severity":1,"message":"431","line":3,"column":31,"nodeType":"427","messageId":"428","endLine":3,"endColumn":39},{"ruleId":"425","severity":1,"message":"432","line":9,"column":10,"nodeType":"427","messageId":"428","endLine":9,"endColumn":16},{"ruleId":"433","severity":1,"message":"434","line":29,"column":8,"nodeType":"435","endLine":29,"endColumn":10,"suggestions":"436"},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"433","severity":1,"message":"437","line":21,"column":8,"nodeType":"435","endLine":21,"endColumn":25,"suggestions":"438"},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"439","line":4,"column":10,"nodeType":"427","messageId":"428","endLine":4,"endColumn":18},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"433","severity":1,"message":"434","line":26,"column":8,"nodeType":"435","endLine":26,"endColumn":10,"suggestions":"440"},{"ruleId":"433","severity":1,"message":"441","line":41,"column":8,"nodeType":"435","endLine":41,"endColumn":24,"suggestions":"442"},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"443","line":12,"column":13,"nodeType":"427","messageId":"428","endLine":12,"endColumn":21},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"444","line":8,"column":32,"nodeType":"427","messageId":"428","endLine":8,"endColumn":43},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"445","line":9,"column":10,"nodeType":"427","messageId":"428","endLine":9,"endColumn":20},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":3,"column":8,"nodeType":"427","messageId":"428","endLine":3,"endColumn":17},{"ruleId":"425","severity":1,"message":"446","line":9,"column":10,"nodeType":"427","messageId":"428","endLine":9,"endColumn":24},{"ruleId":"447","severity":1,"message":"448","line":26,"column":17,"nodeType":"449","endLine":29,"endColumn":19},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"421","replacedBy":"450"},{"ruleId":"423","replacedBy":"451"},{"ruleId":"425","severity":1,"message":"452","line":1,"column":10,"nodeType":"427","messageId":"428","endLine":1,"endColumn":19},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":17},{"ruleId":"425","severity":1,"message":"453","line":9,"column":10,"nodeType":"427","messageId":"428","endLine":9,"endColumn":25},{"ruleId":"425","severity":1,"message":"454","line":18,"column":11,"nodeType":"427","messageId":"428","endLine":18,"endColumn":25},{"ruleId":"425","severity":1,"message":"455","line":28,"column":22,"nodeType":"427","messageId":"428","endLine":28,"endColumn":28},{"ruleId":"425","severity":1,"message":"426","line":6,"column":8,"nodeType":"427","messageId":"428","endLine":6,"endColumn":17},{"ruleId":"425","severity":1,"message":"455","line":21,"column":22,"nodeType":"427","messageId":"428","endLine":21,"endColumn":28},{"ruleId":"425","severity":1,"message":"456","line":18,"column":31,"nodeType":"427","messageId":"428","endLine":18,"endColumn":48},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"456","line":51,"column":31,"nodeType":"427","messageId":"428","endLine":51,"endColumn":48},{"ruleId":"433","severity":1,"message":"457","line":62,"column":8,"nodeType":"435","endLine":62,"endColumn":23,"suggestions":"458"},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"456","line":18,"column":31,"nodeType":"427","messageId":"428","endLine":18,"endColumn":48},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"439","line":1,"column":10,"nodeType":"427","messageId":"428","endLine":1,"endColumn":18},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"459","line":5,"column":24,"nodeType":"427","messageId":"428","endLine":5,"endColumn":36},{"ruleId":"425","severity":1,"message":"460","line":14,"column":10,"nodeType":"427","messageId":"428","endLine":14,"endColumn":30},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"461","line":8,"column":8,"nodeType":"427","messageId":"428","endLine":8,"endColumn":22},{"ruleId":"425","severity":1,"message":"456","line":21,"column":31,"nodeType":"427","messageId":"428","endLine":21,"endColumn":48},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"456","line":19,"column":31,"nodeType":"427","messageId":"428","endLine":19,"endColumn":48},{"ruleId":"433","severity":1,"message":"457","line":24,"column":8,"nodeType":"435","endLine":24,"endColumn":27,"suggestions":"462"},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"463","line":5,"column":38,"nodeType":"427","messageId":"428","endLine":5,"endColumn":48},{"ruleId":"425","severity":1,"message":"426","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":17},{"ruleId":"425","severity":1,"message":"464","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":13},{"ruleId":"425","severity":1,"message":"465","line":5,"column":34,"nodeType":"427","messageId":"428","endLine":5,"endColumn":45},"no-native-reassign",["466"],"no-negated-in-lhs",["467"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","'lazy' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'ROUTES' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["468"],"React Hook useEffect has missing dependencies: 'history' and 'location.pathname'. Either include them or remove the dependency array.",["469"],"'useState' is defined but never used.",["470"],"React Hook useEffect has a missing dependency: 'selectedConfiguration'. Either include it or remove the dependency array.",["471"],"'pathname' is assigned a value but never used.","'headerProps' is assigned a value but never used.","'updateUser' is defined but never used.","'setCurrentUser' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["466"],["467"],"'useEffect' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'onShowPassword' is assigned a value but never used.","'errors' is assigned a value but never used.","'hasUnsavedChanged' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["472"],"'MESSAGE_TYPE' is defined but never used.","'showMessageComponent' is defined but never used.","'ModalComponent' is defined but never used.",["473"],"'tableProps' is assigned a value but never used.","'Table' is defined but never used.","'columnProps' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"474","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},"Update the dependencies array to be: [dispatch]",{"range":"485","text":"486"},"Update the dependencies array to be: [history, isAuthenticated, location.pathname]",{"range":"487","text":"488"},{"range":"489","text":"486"},"Update the dependencies array to be: [configurations, selectedConfiguration]",{"range":"490","text":"491"},"Update the dependencies array to be: [configuration, reset]",{"range":"492","text":"493"},"Update the dependencies array to be: [configurationName, reset]",{"range":"494","text":"495"},[1073,1075],"[dispatch]",[798,815],"[history, isAuthenticated, location.pathname]",[1281,1283],[1782,1798],"[configurations, selectedConfiguration]",[2749,2764],"[configuration, reset]",[807,826],"[configurationName, reset]"]