{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\Routes\\\\PrivateRoutes.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { ROUTES } from '../../config/constants';\nimport Layout from '../Layout/Layout';\nimport PrivateRoute from '../shared/PrivateRoute/PrivateRoute';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Settings from '../Settings/Settings';\nimport Configurations from '../Configurations/Configurations';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { fetchCurrentUser } from '../../redux/actions/auth';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoutes = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const onFetchCurrentUser = async values => {\n    const user = await dispatch(fetchCurrentUser(values));\n\n    if (user) {\n      history.push(ROUTES.dashboard.path);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(PrivateRoute, {\n      exact: true,\n      path: ROUTES.dashboard.path,\n      component: Dashboard,\n      isAuthenticated: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n      path: ROUTES.settings.path,\n      component: Settings,\n      isAuthenticated: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n      exact: true,\n      path: ROUTES.configurations.path,\n      component: Configurations,\n      isAuthenticated: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrivateRoutes, \"FxNkVwM1QRg2/kU3+RDi4ll7EAM=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = PrivateRoutes;\nPrivateRoutes.propTypes = {};\nexport default PrivateRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoutes\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/Routes/PrivateRoutes.js"],"names":["PropTypes","ROUTES","Layout","PrivateRoute","Dashboard","Settings","Configurations","useDispatch","useHistory","fetchCurrentUser","useEffect","PrivateRoutes","props","dispatch","history","onFetchCurrentUser","values","user","push","dashboard","path","settings","configurations","propTypes"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAC3B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,OAAO,GAAGN,UAAU,EAA1B;;AAEA,QAAMO,kBAAkB,GAAG,MAAMC,MAAN,IAAgB;AACvC,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACJ,gBAAgB,CAACO,MAAD,CAAjB,CAA3B;;AAEA,QAAIC,IAAJ,EAAU;AACNH,MAAAA,OAAO,CAACI,IAAR,CAAajB,MAAM,CAACkB,SAAP,CAAiBC,IAA9B;AACH;AACJ,GAND;;AAQA,sBACI,QAAC,MAAD;AAAA,4BACI,QAAC,YAAD;AAAc,MAAA,KAAK,MAAnB;AAAoB,MAAA,IAAI,EAAEnB,MAAM,CAACkB,SAAP,CAAiBC,IAA3C;AAAiD,MAAA,SAAS,EAAEhB,SAA5D;AAAuE,MAAA,eAAe,EAAE;AAAxF;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEH,MAAM,CAACoB,QAAP,CAAgBD,IAApC;AAA0C,MAAA,SAAS,EAAEf,QAArD;AAA+D,MAAA,eAAe,EAAE;AAAhF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,YAAD;AAAc,MAAA,KAAK,MAAnB;AAAoB,MAAA,IAAI,EAAEJ,MAAM,CAACqB,cAAP,CAAsBF,IAAhD;AAAsD,MAAA,SAAS,EAAEd,cAAjE;AAAiF,MAAA,eAAe,EAAE;AAAlG;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAnBD;;GAAMK,a;UACeJ,W,EACDC,U;;;KAFdG,a;AAqBNA,aAAa,CAACY,SAAd,GAA0B,EAA1B;AAEA,eAAeZ,aAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { ROUTES } from '../../config/constants';\nimport Layout from '../Layout/Layout';\nimport PrivateRoute from '../shared/PrivateRoute/PrivateRoute';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Settings from '../Settings/Settings';\nimport Configurations from '../Configurations/Configurations';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { fetchCurrentUser } from '../../redux/actions/auth';\nimport { useEffect } from 'react';\n\nconst PrivateRoutes = props => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const onFetchCurrentUser = async values => {\n        const user = await dispatch(fetchCurrentUser(values));\n\n        if (user) {\n            history.push(ROUTES.dashboard.path);\n        }\n    };\n\n    return (\n        <Layout>\n            <PrivateRoute exact path={ROUTES.dashboard.path} component={Dashboard} isAuthenticated={true} />\n            <PrivateRoute path={ROUTES.settings.path} component={Settings} isAuthenticated={true} />\n            <PrivateRoute exact path={ROUTES.configurations.path} component={Configurations} isAuthenticated={true} />\n        </Layout>\n    );\n};\n\nPrivateRoutes.propTypes = {};\n\nexport default PrivateRoutes;\n"]},"metadata":{},"sourceType":"module"}