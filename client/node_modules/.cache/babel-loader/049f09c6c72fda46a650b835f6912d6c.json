{"ast":null,"code":"import jwtDecode from 'jwt-decode';\nimport axios from '../config/axios';\nexport const setAuthToken = token => {\n  axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  localStorage.setItem('token', JSON.stringify(token));\n};\nexport const deleteAutToken = () => {\n  delete axios.defaults.headers.common['Authorization'];\n  localStorage.removeItem('token');\n};\nexport const authenticateUser = async () => {\n  try {\n    const token = JSON.parse(localStorage.getItem('token'));\n\n    if (token) {\n      if (isTokenExpired(token)) {\n        redirectToLogin();\n      } else {\n        setAuthToken(token);\n      }\n    } else {\n      redirectToLogin();\n    }\n  } catch (error) {\n    console.error(error);\n    redirectToLogin();\n  }\n};\nexport const redirectToLogin = () => {\n  deleteAutToken();\n\n  if (window.location.pathname !== '/login') {\n    window.location.replace('/login');\n  }\n};\nexport const isTokenExpired = token => {\n  try {\n    const decoded = jwtDecode(token);\n    return decoded.exp * 1000 <= Date.now();\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/utils/auth.js"],"names":["jwtDecode","axios","setAuthToken","token","defaults","headers","common","localStorage","setItem","JSON","stringify","deleteAutToken","removeItem","authenticateUser","parse","getItem","isTokenExpired","redirectToLogin","error","console","window","location","pathname","replace","decoded","exp","Date","now"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AACjCF,EAAAA,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASH,KAAM,EAAjE;AACAI,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeP,KAAf,CAA9B;AACH,CAHM;AAKP,OAAO,MAAMQ,cAAc,GAAG,MAAM;AAChC,SAAOV,KAAK,CAACG,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACAC,EAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB;AACH,CAHM;AAKP,OAAO,MAAMC,gBAAgB,GAAG,YAAY;AACxC,MAAI;AACA,UAAMV,KAAK,GAAGM,IAAI,CAACK,KAAL,CAAWP,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAX,CAAd;;AAEA,QAAIZ,KAAJ,EAAW;AACP,UAAIa,cAAc,CAACb,KAAD,CAAlB,EAA2B;AACvBc,QAAAA,eAAe;AAClB,OAFD,MAEO;AACHf,QAAAA,YAAY,CAACC,KAAD,CAAZ;AACH;AACJ,KAND,MAMO;AACHc,MAAAA,eAAe;AAClB;AACJ,GAZD,CAYE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAD,IAAAA,eAAe;AAClB;AACJ,CAjBM;AAmBP,OAAO,MAAMA,eAAe,GAAG,MAAM;AACjCN,EAAAA,cAAc;;AAEd,MAAIS,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,QAAjC,EAA2C;AACvCF,IAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB,QAAxB;AACH;AACJ,CANM;AAQP,OAAO,MAAMP,cAAc,GAAGb,KAAK,IAAI;AACnC,MAAI;AACA,UAAMqB,OAAO,GAAGxB,SAAS,CAACG,KAAD,CAAzB;AAEA,WAAOqB,OAAO,CAACC,GAAR,GAAc,IAAd,IAAsBC,IAAI,CAACC,GAAL,EAA7B;AACH,GAJD,CAIE,OAAOT,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ,CARM","sourcesContent":["import jwtDecode from 'jwt-decode';\r\nimport axios from '../config/axios';\r\n\r\nexport const setAuthToken = token => {\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    localStorage.setItem('token', JSON.stringify(token));\r\n};\r\n\r\nexport const deleteAutToken = () => {\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    localStorage.removeItem('token');\r\n};\r\n\r\nexport const authenticateUser = async () => {\r\n    try {\r\n        const token = JSON.parse(localStorage.getItem('token'));\r\n\r\n        if (token) {\r\n            if (isTokenExpired(token)) {\r\n                redirectToLogin();\r\n            } else {\r\n                setAuthToken(token);\r\n            }\r\n        } else {\r\n            redirectToLogin();\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        redirectToLogin();\r\n    }\r\n};\r\n\r\nexport const redirectToLogin = () => {\r\n    deleteAutToken();\r\n\r\n    if (window.location.pathname !== '/login') {\r\n        window.location.replace('/login');\r\n    }\r\n};\r\n\r\nexport const isTokenExpired = token => {\r\n    try {\r\n        const decoded = jwtDecode(token);\r\n\r\n        return decoded.exp * 1000 <= Date.now();\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}