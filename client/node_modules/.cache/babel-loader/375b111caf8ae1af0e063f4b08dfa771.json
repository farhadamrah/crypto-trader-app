{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\shared\\\\PrivateRoute\\\\PrivateRoute.js\";\nimport { Route, Redirect } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirect: pathname,\n  ...rest\n}) => {\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, { ...rest,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 49\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: pathname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 86\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n_c = PrivateRoute;\nPrivateRoute.defaultProps = {\n  redirect: '/login'\n};\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/shared/PrivateRoute/PrivateRoute.js"],"names":["Route","Redirect","PrivateRoute","component","Component","isAuthenticated","redirect","pathname","rest","props","defaultProps"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,eAAxB;AAAyCC,EAAAA,QAAQ,EAAEC,QAAnD;AAA6D,KAAGC;AAAhE,CAAD,KAA4E;AAC7F,sBACI,QAAC,KAAD,OACQA,IADR;AAEI,IAAA,MAAM,EAAEC,KAAK,IAAKJ,eAAe,gBAAG,QAAC,SAAD,OAAeG,IAAf;AAAA,SAAyBC;AAAzB;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAwC,QAAC,QAAD;AAAU,MAAA,EAAE,EAAEF;AAAd;AAAA;AAAA;AAAA;AAAA;AAF7E;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAPD;;KAAML,Y;AASNA,YAAY,CAACQ,YAAb,GAA4B;AAAEJ,EAAAA,QAAQ,EAAE;AAAZ,CAA5B;AAEA,eAAeJ,YAAf","sourcesContent":["import { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({ component: Component, isAuthenticated, redirect: pathname, ...rest }) => {\n    return (\n        <Route\n            {...rest}\n            render={props => (isAuthenticated ? <Component {...rest} {...props} /> : <Redirect to={pathname} />)}\n        />\n    );\n};\n\nPrivateRoute.defaultProps = { redirect: '/login' };\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}