{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\Routes\\\\Routes.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { Suspense, lazy, useEffect } from 'react';\nimport { Route, useLocation, Switch } from 'react-router-dom';\nimport { isPrivateRoute } from '../../utils/route';\nimport PublicRoutes from './PublicRoutes';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCurrentUser } from '../../redux/actions/auth';\nimport Spinner from '../shared/Spinner/Spinner';\nimport { SPINNER_SIZES } from '../../config/constants';\nimport { setAppLoading } from '../../redux/actions/global';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PrivateRoutes = /*#__PURE__*/React.lazy(_c = () => import('./PrivateRoutes'));\n_c2 = PrivateRoutes;\n\nconst Routes = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const isAppLoading = useSelector(state => state.global.isAppLoading);\n  useEffect(() => {\n    const loadApp = async () => {\n      await dispatch(fetchCurrentUser());\n      dispatch(setAppLoading(false));\n    };\n\n    loadApp();\n  }, []);\n  return isAppLoading ? /*#__PURE__*/_jsxDEV(Spinner, {\n    size: SPINNER_SIZES.medium\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PublicRoutes, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), isPrivateRoute(location.pathname) ? /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(Spinner, {\n        size: SPINNER_SIZES.medium\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 37\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(PrivateRoutes, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(Routes, \"v4I0i/xzaRcA+snHMQkzvfvtpqk=\", false, function () {\n  return [useDispatch, useLocation, useSelector];\n});\n\n_c3 = Routes;\nRoutes.propTypes = {};\nexport default Routes;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PrivateRoutes$React.lazy\");\n$RefreshReg$(_c2, \"PrivateRoutes\");\n$RefreshReg$(_c3, \"Routes\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/Routes/Routes.js"],"names":["PropTypes","React","Suspense","lazy","useEffect","Route","useLocation","Switch","isPrivateRoute","PublicRoutes","useDispatch","useSelector","fetchCurrentUser","Spinner","SPINNER_SIZES","setAppLoading","PrivateRoutes","Routes","props","dispatch","location","isAppLoading","state","global","loadApp","medium","pathname","propTypes"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,kBAA3C;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,4BAA9B;;;AACA,MAAMC,aAAa,gBAAGf,KAAK,CAACE,IAAN,MAAW,MAAM,OAAO,iBAAP,CAAjB,CAAtB;MAAMa,a;;AAEN,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AACpB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,QAAQ,GAAGd,WAAW,EAA5B;AAEA,QAAMe,YAAY,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaF,YAAvB,CAAhC;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,OAAO,GAAG,YAAY;AACxB,YAAML,QAAQ,CAACP,gBAAgB,EAAjB,CAAd;AAEAO,MAAAA,QAAQ,CAACJ,aAAa,CAAC,KAAD,CAAd,CAAR;AACH,KAJD;;AAMAS,IAAAA,OAAO;AACV,GARQ,EAQN,EARM,CAAT;AAUA,SAAOH,YAAY,gBACf,QAAC,OAAD;AAAS,IAAA,IAAI,EAAEP,aAAa,CAACW;AAA7B;AAAA;AAAA;AAAA;AAAA,UADe,gBAGf;AAAA,4BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKjB,cAAc,CAACY,QAAQ,CAACM,QAAV,CAAd,gBACG,QAAC,QAAD;AAAU,MAAA,QAAQ,eAAE,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEZ,aAAa,CAACW;AAA7B;AAAA;AAAA;AAAA;AAAA,cAApB;AAAA,6BACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADH,GAIG,IANR;AAAA,kBAHJ;AAYH,CA5BD;;GAAMR,M;UACeP,W,EACAJ,W,EAEIK,W;;;MAJnBM,M;AA8BNA,MAAM,CAACU,SAAP,GAAmB,EAAnB;AAEA,eAAeV,MAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { Suspense, lazy, useEffect } from 'react';\r\nimport { Route, useLocation, Switch } from 'react-router-dom';\r\nimport { isPrivateRoute } from '../../utils/route';\r\nimport PublicRoutes from './PublicRoutes';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchCurrentUser } from '../../redux/actions/auth';\r\nimport Spinner from '../shared/Spinner/Spinner';\r\nimport { SPINNER_SIZES } from '../../config/constants';\r\nimport { setAppLoading } from '../../redux/actions/global';\r\nconst PrivateRoutes = React.lazy(() => import('./PrivateRoutes'));\r\n\r\nconst Routes = props => {\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n\r\n    const isAppLoading = useSelector(state => state.global.isAppLoading);\r\n\r\n    useEffect(() => {\r\n        const loadApp = async () => {\r\n            await dispatch(fetchCurrentUser());\r\n\r\n            dispatch(setAppLoading(false));\r\n        };\r\n\r\n        loadApp();\r\n    }, []);\r\n\r\n    return isAppLoading ? (\r\n        <Spinner size={SPINNER_SIZES.medium} />\r\n    ) : (\r\n        <>\r\n            <PublicRoutes />\r\n            {isPrivateRoute(location.pathname) ? (\r\n                <Suspense fallback={<Spinner size={SPINNER_SIZES.medium} />}>\r\n                    <PrivateRoutes />\r\n                </Suspense>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nRoutes.propTypes = {};\r\n\r\nexport default Routes;\r\n"]},"metadata":{},"sourceType":"module"}