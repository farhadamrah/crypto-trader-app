{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\Configurations\\\\NewConfiguration\\\\Modal\\\\Modal.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport ModalComponent from '../../../shared/Modal/Modal';\nimport Input from '../../../shared/Input/Input';\nimport FormItem from '../../../shared/Form/FormItem/FormItem';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { createConfiguration } from '../../../../redux/actions/configurations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Modal = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    isVisible,\n    hideModal\n  } = props;\n  const {\n    register: registerFormField,\n    handleSubmit,\n    reset,\n    formState: {\n      isDirty: hasUnsavedChanged\n    }\n  } = useForm({});\n\n  const onClose = () => {\n    hideModal();\n    resetForm();\n  };\n\n  const onOk = () => {\n    handleSubmit(async values => {\n      const configuration = await dispatch(createConfiguration(values));\n\n      if (configuration) {\n        hideModal();\n        resetForm();\n      }\n    })();\n  };\n\n  const resetForm = () => {\n    reset({\n      name: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ModalComponent, {\n    isVisible: isVisible,\n    onClose: onClose,\n    onOk: onOk,\n    title: 'Create configuration',\n    buttonProps: {\n      okText: 'Create'\n    },\n    showClose: true,\n    showFooter: true,\n    children: /*#__PURE__*/_jsxDEV(FormItem, {\n      label: 'Name',\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        type: 'text',\n        placeholder: 'Name',\n        ...registerFormField('name')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Modal, \"PGi7Y3/us7oSKfP7a0VZl/UqEUI=\", false, function () {\n  return [useDispatch, useForm];\n});\n\n_c = Modal;\nModal.propTypes = {};\nexport default Modal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/Configurations/NewConfiguration/Modal/Modal.js"],"names":["PropTypes","ModalComponent","Input","FormItem","useForm","useDispatch","createConfiguration","Modal","props","dispatch","isVisible","hideModal","register","registerFormField","handleSubmit","reset","formState","isDirty","hasUnsavedChanged","onClose","resetForm","onOk","values","configuration","name","okText","propTypes"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,QAAP,MAAqB,wCAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0CAApC;;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AAAA;;AACnB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AAEA,QAAM;AAAEK,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA2BH,KAAjC;AAEA,QAAM;AACFI,IAAAA,QAAQ,EAAEC,iBADR;AAEFC,IAAAA,YAFE;AAGFC,IAAAA,KAHE;AAIFC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,OAAO,EAAEC;AAAX;AAJT,MAKFd,OAAO,CAAC,EAAD,CALX;;AAOA,QAAMe,OAAO,GAAG,MAAM;AAClBR,IAAAA,SAAS;AACTS,IAAAA,SAAS;AACZ,GAHD;;AAKA,QAAMC,IAAI,GAAG,MAAM;AACfP,IAAAA,YAAY,CAAC,MAAMQ,MAAN,IAAgB;AACzB,YAAMC,aAAa,GAAG,MAAMd,QAAQ,CAACH,mBAAmB,CAACgB,MAAD,CAApB,CAApC;;AAEA,UAAIC,aAAJ,EAAmB;AACfZ,QAAAA,SAAS;AACTS,QAAAA,SAAS;AACZ;AACJ,KAPW,CAAZ;AAQH,GATD;;AAWA,QAAMA,SAAS,GAAG,MAAM;AACpBL,IAAAA,KAAK,CAAC;AAAES,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAL;AACH,GAFD;;AAIA,sBACI,QAAC,cAAD;AACI,IAAA,SAAS,EAAEd,SADf;AAEI,IAAA,OAAO,EAAES,OAFb;AAGI,IAAA,IAAI,EAAEE,IAHV;AAII,IAAA,KAAK,EAAE,sBAJX;AAKI,IAAA,WAAW,EAAE;AACTI,MAAAA,MAAM,EAAE;AADC,KALjB;AAQI,IAAA,SAAS,MARb;AASI,IAAA,UAAU,MATd;AAAA,2BAWI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAE,MAAjB;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAE,MAAb;AAAqB,QAAA,WAAW,EAAE,MAAlC;AAAA,WAA8CZ,iBAAiB,CAAC,MAAD;AAA/D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAjDD;;GAAMN,K;UACeF,W,EASbD,O;;;KAVFG,K;AAmDNA,KAAK,CAACmB,SAAN,GAAkB,EAAlB;AAEA,eAAenB,KAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport ModalComponent from '../../../shared/Modal/Modal';\r\nimport Input from '../../../shared/Input/Input';\r\nimport FormItem from '../../../shared/Form/FormItem/FormItem';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createConfiguration } from '../../../../redux/actions/configurations';\r\n\r\nconst Modal = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { isVisible, hideModal } = props;\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { isDirty: hasUnsavedChanged },\r\n    } = useForm({});\r\n\r\n    const onClose = () => {\r\n        hideModal();\r\n        resetForm();\r\n    };\r\n\r\n    const onOk = () => {\r\n        handleSubmit(async values => {\r\n            const configuration = await dispatch(createConfiguration(values));\r\n\r\n            if (configuration) {\r\n                hideModal();\r\n                resetForm();\r\n            }\r\n        })();\r\n    };\r\n\r\n    const resetForm = () => {\r\n        reset({ name: '' });\r\n    };\r\n\r\n    return (\r\n        <ModalComponent\r\n            isVisible={isVisible}\r\n            onClose={onClose}\r\n            onOk={onOk}\r\n            title={'Create configuration'}\r\n            buttonProps={{\r\n                okText: 'Create',\r\n            }}\r\n            showClose\r\n            showFooter\r\n        >\r\n            <FormItem label={'Name'}>\r\n                <Input type={'text'} placeholder={'Name'} {...registerFormField('name')} />\r\n            </FormItem>\r\n        </ModalComponent>\r\n    );\r\n};\r\n\r\nModal.propTypes = {};\r\n\r\nexport default Modal;\r\n"]},"metadata":{},"sourceType":"module"}