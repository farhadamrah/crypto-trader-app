{"ast":null,"code":"import * as TYPES from '../types';\nconst initialState = {\n  messages: []\n};\n\nconst messages = (state = initialState, action) => {\n  const {\n    payload\n  } = action;\n\n  switch (action.type) {\n    case TYPES.SHOW_MESSAGE_COMPONENT:\n      {\n        return { ...state,\n          messages: [...state.messages, payload]\n        };\n      }\n\n    case TYPES.DESTROY_MESSAGE_COMPONENT:\n      {\n        return { ...state,\n          messages: state.messages.filter(message => message.id !== payload)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default messages;","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/redux/reducers/components.js"],"names":["TYPES","initialState","messages","state","action","payload","type","SHOW_MESSAGE_COMPONENT","DESTROY_MESSAGE_COMPONENT","filter","message","id"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;;AAIA,MAAMA,QAAQ,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB;;AAEA,UAAQA,MAAM,CAACE,IAAf;AACI,SAAKN,KAAK,CAACO,sBAAX;AAAmC;AAC/B,eAAO,EACH,GAAGJ,KADA;AAEHD,UAAAA,QAAQ,EAAE,CAAC,GAAGC,KAAK,CAACD,QAAV,EAAoBG,OAApB;AAFP,SAAP;AAIH;;AACD,SAAKL,KAAK,CAACQ,yBAAX;AAAsC;AAClC,eAAO,EACH,GAAGL,KADA;AAEHD,UAAAA,QAAQ,EAAEC,KAAK,CAACD,QAAN,CAAeO,MAAf,CAAsBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,OAAhD;AAFP,SAAP;AAIH;;AACD;AACI,aAAOF,KAAP;AAdR;AAgBH,CAnBD;;AAqBA,eAAeD,QAAf","sourcesContent":["import * as TYPES from '../types';\r\n\r\nconst initialState = {\r\n    messages: [],\r\n};\r\n\r\nconst messages = (state = initialState, action) => {\r\n    const { payload } = action;\r\n\r\n    switch (action.type) {\r\n        case TYPES.SHOW_MESSAGE_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, payload],\r\n            };\r\n        }\r\n        case TYPES.DESTROY_MESSAGE_COMPONENT: {\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(message => message.id !== payload),\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default messages;\r\n"]},"metadata":{},"sourceType":"module"}