{"ast":null,"code":"import * as TYPES from '../types';\nconst initialState = {\n  list: []\n};\n\nconst configurations = (state = initialState, action) => {\n  const {\n    payload\n  } = action;\n\n  switch (action.type) {\n    case TYPES.CONFIGURATIONS_LIST_CHANGED:\n      {\n        return { ...state,\n          list: payload\n        };\n      }\n\n    case TYPES.CONFIGURATION_CREATED:\n      {\n        return { ...state,\n          list: state.list.concat(payload)\n        };\n      }\n\n    case TYPES.CONFIGURATION_UPDATED:\n      {\n        return { ...state,\n          list: state.list.map(configuration => {\n            if (configuration.id === payload.id) {\n              return payload;\n            }\n\n            return configuration;\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default configurations;","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/redux/reducers/configurations.js"],"names":["TYPES","initialState","list","configurations","state","action","payload","type","CONFIGURATIONS_LIST_CHANGED","CONFIGURATION_CREATED","concat","CONFIGURATION_UPDATED","map","configuration","id"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACrD,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB;;AAEA,UAAQA,MAAM,CAACE,IAAf;AACI,SAAKP,KAAK,CAACQ,2BAAX;AAAwC;AACpC,eAAO,EACH,GAAGJ,KADA;AAEHF,UAAAA,IAAI,EAAEI;AAFH,SAAP;AAIH;;AACD,SAAKN,KAAK,CAACS,qBAAX;AAAkC;AAC9B,eAAO,EACH,GAAGL,KADA;AAEHF,UAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWQ,MAAX,CAAkBJ,OAAlB;AAFH,SAAP;AAIH;;AACD,SAAKN,KAAK,CAACW,qBAAX;AAAkC;AAC9B,eAAO,EACH,GAAGP,KADA;AAEHF,UAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWU,GAAX,CAAeC,aAAa,IAAI;AAClC,gBAAIA,aAAa,CAACC,EAAd,KAAqBR,OAAO,CAACQ,EAAjC,EAAqC;AACjC,qBAAOR,OAAP;AACH;;AAED,mBAAOO,aAAP;AACH,WANK;AAFH,SAAP;AAUH;;AACD;AACI,aAAOT,KAAP;AA1BR;AA4BH,CA/BD;;AAiCA,eAAeD,cAAf","sourcesContent":["import * as TYPES from '../types';\r\n\r\nconst initialState = {\r\n    list: [],\r\n};\r\n\r\nconst configurations = (state = initialState, action) => {\r\n    const { payload } = action;\r\n\r\n    switch (action.type) {\r\n        case TYPES.CONFIGURATIONS_LIST_CHANGED: {\r\n            return {\r\n                ...state,\r\n                list: payload,\r\n            };\r\n        }\r\n        case TYPES.CONFIGURATION_CREATED: {\r\n            return {\r\n                ...state,\r\n                list: state.list.concat(payload),\r\n            };\r\n        }\r\n        case TYPES.CONFIGURATION_UPDATED: {\r\n            return {\r\n                ...state,\r\n                list: state.list.map(configuration => {\r\n                    if (configuration.id === payload.id) {\r\n                        return payload;\r\n                    }\r\n\r\n                    return configuration;\r\n                }),\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default configurations;\r\n"]},"metadata":{},"sourceType":"module"}