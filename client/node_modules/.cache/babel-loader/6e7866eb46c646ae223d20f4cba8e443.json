{"ast":null,"code":"import * as TYPES from '../types';\nimport ConfigurationService from '../../services/ConfigurationService';\nimport { ERROR_MESSAGES, MESSAGE_TYPE } from '../../config/constants';\nimport { showMessageComponent } from './components';\nexport const setConfigurationsList = list => ({\n  type: TYPES.CONFIGURATIONS_LIST_CHANGED,\n  payload: list\n});\nexport const addNewConfiguration = configuration => ({\n  type: TYPES.CONFIGURATION_CREATED,\n  payload: configuration\n});\nexport const setUpdatedConfiguration = configuration => ({\n  type: TYPES.CONFIGURATION_UPDATED,\n  payload: configuration\n});\nexport const getConfigurationsList = () => async dispatch => {\n  try {\n    const response = await ConfigurationService.getConfigurations();\n    const configurations = response.data;\n    dispatch(setConfigurationsList(configurations));\n    return configurations;\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const createConfiguration = configurationData => async dispatch => {\n  try {\n    const response = await ConfigurationService.createConfiguration(configurationData);\n    const configuration = response.data;\n    dispatch(addNewConfiguration(configuration));\n    return configuration;\n  } catch (error) {\n    var _error$response;\n\n    const errorResponseMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};\nexport const updateConfiguration = configurationData => async dispatch => {\n  try {\n    const response = await ConfigurationService.updateConfiguration(configurationData);\n    const updatedConfiguration = response.data;\n    dispatch(setUpdatedConfiguration(updatedConfiguration));\n    return updatedConfiguration;\n  } catch (error) {\n    var _error$response2;\n\n    const errorResponseMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/redux/actions/configurations.js"],"names":["TYPES","ConfigurationService","ERROR_MESSAGES","MESSAGE_TYPE","showMessageComponent","setConfigurationsList","list","type","CONFIGURATIONS_LIST_CHANGED","payload","addNewConfiguration","configuration","CONFIGURATION_CREATED","setUpdatedConfiguration","CONFIGURATION_UPDATED","getConfigurationsList","dispatch","response","getConfigurations","configurations","data","error","console","createConfiguration","configurationData","errorResponseMessage","message","defaultError","destroyAll","updateConfiguration","updatedConfiguration"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,wBAA7C;AACA,SAASC,oBAAT,QAAqC,cAArC;AAEA,OAAO,MAAMC,qBAAqB,GAAGC,IAAI,KAAK;AAC1CC,EAAAA,IAAI,EAAEP,KAAK,CAACQ,2BAD8B;AAE1CC,EAAAA,OAAO,EAAEH;AAFiC,CAAL,CAAlC;AAKP,OAAO,MAAMI,mBAAmB,GAAGC,aAAa,KAAK;AACjDJ,EAAAA,IAAI,EAAEP,KAAK,CAACY,qBADqC;AAEjDH,EAAAA,OAAO,EAAEE;AAFwC,CAAL,CAAzC;AAKP,OAAO,MAAME,uBAAuB,GAAGF,aAAa,KAAK;AACrDJ,EAAAA,IAAI,EAAEP,KAAK,CAACc,qBADyC;AAErDL,EAAAA,OAAO,EAAEE;AAF4C,CAAL,CAA7C;AAKP,OAAO,MAAMI,qBAAqB,GAAG,MAAM,MAAMC,QAAN,IAAkB;AACzD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMhB,oBAAoB,CAACiB,iBAArB,EAAvB;AAEA,UAAMC,cAAc,GAAGF,QAAQ,CAACG,IAAhC;AAEAJ,IAAAA,QAAQ,CAACX,qBAAqB,CAACc,cAAD,CAAtB,CAAR;AAEA,WAAOA,cAAP;AACH,GARD,CAQE,OAAOE,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH;AACJ,CAZM;AAcP,OAAO,MAAME,mBAAmB,GAAGC,iBAAiB,IAAI,MAAMR,QAAN,IAAkB;AACtE,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMhB,oBAAoB,CAACsB,mBAArB,CAAyCC,iBAAzC,CAAvB;AAEA,UAAMb,aAAa,GAAGM,QAAQ,CAACG,IAA/B;AAEAJ,IAAAA,QAAQ,CAACN,mBAAmB,CAACC,aAAD,CAApB,CAAR;AAEA,WAAOA,aAAP;AACH,GARD,CAQE,OAAOU,KAAP,EAAc;AAAA;;AACZ,UAAMI,oBAAoB,GAAG,oBAAAJ,KAAK,CAACJ,QAAN,oEAAgBG,IAAhB,CAAqBC,KAArB,CAA2BK,OAA3B,KAAsCxB,cAAc,CAACyB,YAAlF;AAEAL,IAAAA,OAAO,CAACD,KAAR,CAAcI,oBAAoB,IAAIJ,KAAtC;AAEAL,IAAAA,QAAQ,CAACZ,oBAAoB,CAACD,YAAY,CAACkB,KAAd,EAAqBI,oBAArB,EAA2C;AAAEG,MAAAA,UAAU,EAAE;AAAd,KAA3C,CAArB,CAAR;AACH;AACJ,CAhBM;AAkBP,OAAO,MAAMC,mBAAmB,GAAGL,iBAAiB,IAAI,MAAMR,QAAN,IAAkB;AACtE,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMhB,oBAAoB,CAAC4B,mBAArB,CAAyCL,iBAAzC,CAAvB;AAEA,UAAMM,oBAAoB,GAAGb,QAAQ,CAACG,IAAtC;AAEAJ,IAAAA,QAAQ,CAACH,uBAAuB,CAACiB,oBAAD,CAAxB,CAAR;AAEA,WAAOA,oBAAP;AACH,GARD,CAQE,OAAOT,KAAP,EAAc;AAAA;;AACZ,UAAMI,oBAAoB,GAAG,qBAAAJ,KAAK,CAACJ,QAAN,sEAAgBG,IAAhB,CAAqBC,KAArB,CAA2BK,OAA3B,KAAsCxB,cAAc,CAACyB,YAAlF;AAEAL,IAAAA,OAAO,CAACD,KAAR,CAAcI,oBAAoB,IAAIJ,KAAtC;AAEAL,IAAAA,QAAQ,CAACZ,oBAAoB,CAACD,YAAY,CAACkB,KAAd,EAAqBI,oBAArB,EAA2C;AAAEG,MAAAA,UAAU,EAAE;AAAd,KAA3C,CAArB,CAAR;AACH;AACJ,CAhBM","sourcesContent":["import * as TYPES from '../types';\r\nimport ConfigurationService from '../../services/ConfigurationService';\r\nimport { ERROR_MESSAGES, MESSAGE_TYPE } from '../../config/constants';\r\nimport { showMessageComponent } from './components';\r\n\r\nexport const setConfigurationsList = list => ({\r\n    type: TYPES.CONFIGURATIONS_LIST_CHANGED,\r\n    payload: list,\r\n});\r\n\r\nexport const addNewConfiguration = configuration => ({\r\n    type: TYPES.CONFIGURATION_CREATED,\r\n    payload: configuration,\r\n});\r\n\r\nexport const setUpdatedConfiguration = configuration => ({\r\n    type: TYPES.CONFIGURATION_UPDATED,\r\n    payload: configuration,\r\n});\r\n\r\nexport const getConfigurationsList = () => async dispatch => {\r\n    try {\r\n        const response = await ConfigurationService.getConfigurations();\r\n\r\n        const configurations = response.data;\r\n\r\n        dispatch(setConfigurationsList(configurations));\r\n\r\n        return configurations;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n};\r\n\r\nexport const createConfiguration = configurationData => async dispatch => {\r\n    try {\r\n        const response = await ConfigurationService.createConfiguration(configurationData);\r\n\r\n        const configuration = response.data;\r\n\r\n        dispatch(addNewConfiguration(configuration));\r\n\r\n        return configuration;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n\r\nexport const updateConfiguration = configurationData => async dispatch => {\r\n    try {\r\n        const response = await ConfigurationService.updateConfiguration(configurationData);\r\n\r\n        const updatedConfiguration = response.data;\r\n\r\n        dispatch(setUpdatedConfiguration(updatedConfiguration));\r\n\r\n        return updatedConfiguration;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}