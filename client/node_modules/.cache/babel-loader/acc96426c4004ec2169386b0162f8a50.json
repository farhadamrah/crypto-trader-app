{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\Configurations\\\\Configurations.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport Configuration from './Configuration/Configuration';\nimport NewConfiguration from './NewConfiguration/NewConfiguration';\nimport { useEffect, useState } from 'react';\nimport EditConfigurationDrawer from './EditConfigurationDrawer/EditConfigurationDrawer';\nimport NewConfigurationModal from './NewConfiguration/Modal/Modal';\nimport useModal from '../../hooks/useModal';\nimport useDrawer from '../../hooks/useDrawer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getConfigurationsList } from '../../redux/actions/configurations';\nimport StatusConfigurationModal from './Configuration/StatusConfigurationModal/StatusConfigurationModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Configurations = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const configurations = useSelector(state => state.configurations.list);\n  const user = useSelector(state => state.auth.user);\n  const [isNewConfigurationModalVisible, showNewConfigurationModal, hideNewConfigurationModal] = useModal();\n  const [isConfigurationEditDrawerVisible, openConfigurationEditDrawer, closeConfigurationEditDrawer] = useDrawer();\n  const {\n    isStatusConfigurationModalVisible,\n    showStatusConfigurationModal,\n    hideStatusConfigurationModal\n  } = useModal();\n  const [selectedConfiguration, setSelectedConfiguration] = useState({});\n  useEffect(() => {\n    dispatch(getConfigurationsList());\n  }, []);\n  useEffect(() => {\n    if (!isConfigurationEditDrawerVisible) {\n      setSelectedConfiguration({});\n    }\n  }, [isConfigurationEditDrawerVisible]);\n  useEffect(() => {\n    if (Object.keys(selectedConfiguration).length) {\n      const matchedConfiguration = configurations.find(configuration => configuration.id === selectedConfiguration.id);\n      setSelectedConfiguration(matchedConfiguration);\n    }\n  }, [configurations]);\n\n  const editConfiguration = configuration => {\n    setSelectedConfiguration(configuration);\n    openConfigurationEditDrawer();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-6 py-10 flex flex-wrap gap-6\",\n      children: [configurations.map(configuration => {\n        return /*#__PURE__*/_jsxDEV(Configuration, {\n          isEditable: configuration.user_id === user.id,\n          editConfiguration: editConfiguration,\n          showStatusConfigurationModal: showStatusConfigurationModal,\n          ...configuration\n        }, configuration.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(NewConfiguration, {\n        showNewConfigurationModal: showNewConfigurationModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EditConfigurationDrawer, {\n      isVisible: isConfigurationEditDrawerVisible,\n      closeDrawer: closeConfigurationEditDrawer,\n      configuration: selectedConfiguration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StatusConfigurationModal, {\n      isVisible: isStatusConfigurationModalVisible,\n      showModal: showStatusConfigurationModal,\n      hideModal: hideStatusConfigurationModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NewConfigurationModal, {\n      isVisible: isNewConfigurationModalVisible,\n      hideModal: hideNewConfigurationModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Configurations, \"u6e8vztuhe/HBQNxh2dKWVvPxjE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useModal, useDrawer, useModal];\n});\n\n_c = Configurations;\nConfigurations.propTypes = {};\nexport default Configurations;\n\nvar _c;\n\n$RefreshReg$(_c, \"Configurations\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/Configurations/Configurations.js"],"names":["PropTypes","Configuration","NewConfiguration","useEffect","useState","EditConfigurationDrawer","NewConfigurationModal","useModal","useDrawer","useDispatch","useSelector","getConfigurationsList","StatusConfigurationModal","Configurations","props","dispatch","configurations","state","list","user","auth","isNewConfigurationModalVisible","showNewConfigurationModal","hideNewConfigurationModal","isConfigurationEditDrawerVisible","openConfigurationEditDrawer","closeConfigurationEditDrawer","isStatusConfigurationModalVisible","showStatusConfigurationModal","hideStatusConfigurationModal","selectedConfiguration","setSelectedConfiguration","Object","keys","length","matchedConfiguration","find","configuration","id","editConfiguration","map","user_id","propTypes"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport Configuration from './Configuration/Configuration';\nimport NewConfiguration from './NewConfiguration/NewConfiguration';\nimport { useEffect, useState } from 'react';\nimport EditConfigurationDrawer from './EditConfigurationDrawer/EditConfigurationDrawer';\nimport NewConfigurationModal from './NewConfiguration/Modal/Modal';\n\nimport useModal from '../../hooks/useModal';\nimport useDrawer from '../../hooks/useDrawer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getConfigurationsList } from '../../redux/actions/configurations';\nimport StatusConfigurationModal from './Configuration/StatusConfigurationModal/StatusConfigurationModal';\n\nconst Configurations = props => {\n    const dispatch = useDispatch();\n\n    const configurations = useSelector(state => state.configurations.list);\n    const user = useSelector(state => state.auth.user);\n\n    const [isNewConfigurationModalVisible, showNewConfigurationModal, hideNewConfigurationModal] = useModal();\n    const [isConfigurationEditDrawerVisible, openConfigurationEditDrawer, closeConfigurationEditDrawer] = useDrawer();\n\n    const { isStatusConfigurationModalVisible, showStatusConfigurationModal, hideStatusConfigurationModal } =\n        useModal();\n\n    const [selectedConfiguration, setSelectedConfiguration] = useState({});\n\n    useEffect(() => {\n        dispatch(getConfigurationsList());\n    }, []);\n\n    useEffect(() => {\n        if (!isConfigurationEditDrawerVisible) {\n            setSelectedConfiguration({});\n        }\n    }, [isConfigurationEditDrawerVisible]);\n\n    useEffect(() => {\n        if (Object.keys(selectedConfiguration).length) {\n            const matchedConfiguration = configurations.find(\n                configuration => configuration.id === selectedConfiguration.id\n            );\n            setSelectedConfiguration(matchedConfiguration);\n        }\n    }, [configurations]);\n\n    const editConfiguration = configuration => {\n        setSelectedConfiguration(configuration);\n        openConfigurationEditDrawer();\n    };\n\n    return (\n        <>\n            <div className='px-6 py-10 flex flex-wrap gap-6'>\n                {configurations.map(configuration => {\n                    return (\n                        <Configuration\n                            key={configuration.id}\n                            isEditable={configuration.user_id === user.id}\n                            editConfiguration={editConfiguration}\n                            showStatusConfigurationModal={showStatusConfigurationModal}\n                            {...configuration}\n                        />\n                    );\n                })}\n                <NewConfiguration showNewConfigurationModal={showNewConfigurationModal} />\n            </div>\n\n            <EditConfigurationDrawer\n                isVisible={isConfigurationEditDrawerVisible}\n                closeDrawer={closeConfigurationEditDrawer}\n                configuration={selectedConfiguration}\n            />\n\n            <StatusConfigurationModal\n                isVisible={isStatusConfigurationModalVisible}\n                showModal={showStatusConfigurationModal}\n                hideModal={hideStatusConfigurationModal}\n            />\n\n            <NewConfigurationModal isVisible={isNewConfigurationModalVisible} hideModal={hideNewConfigurationModal} />\n        </>\n    );\n};\n\nConfigurations.propTypes = {};\n\nexport default Configurations;\n"]},"metadata":{},"sourceType":"module"}