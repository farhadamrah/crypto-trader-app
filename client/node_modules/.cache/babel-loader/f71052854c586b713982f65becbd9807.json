{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\Routes\\\\Routes.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { Route, useLocation } from 'react-router-dom';\nimport { ROUTES } from '../../config/constants';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Layout from '../Layout/Layout';\nimport { isPrivateRoute } from '../../utils/route';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Routes = props => {\n  _s();\n\n  let location = useLocation();\n  isPrivateRoute(location.pathname);\n  const routes = {\n    login: {\n      path: ROUTES.login.path,\n      component: Login\n    },\n    register: {\n      path: ROUTES.register.path,\n      component: Register\n    },\n    dashboard: {\n      path: ROUTES.dashboard.path,\n      component: Dashboard\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: routes.map(route => {\n        return /*#__PURE__*/_jsxDEV(Route, {\n          path: route.path,\n          component: route.component\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Routes, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n\n_c = Routes;\nRoutes.propTypes = {\n  path: PropTypes.oneOf(Object.values(ROUTES))\n};\nexport default Routes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/Routes/Routes.js"],"names":["PropTypes","Route","useLocation","ROUTES","Login","Register","Dashboard","Layout","isPrivateRoute","Routes","props","location","pathname","routes","login","path","component","register","dashboard","map","route","propTypes","oneOf","Object","values"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,WAAhB,QAAmC,kBAAnC;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,SAASC,cAAT,QAA+B,mBAA/B;;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AACpB,MAAIC,QAAQ,GAAGT,WAAW,EAA1B;AAEAM,EAAAA,cAAc,CAACG,QAAQ,CAACC,QAAV,CAAd;AAEA,QAAMC,MAAM,GAAG;AACXC,IAAAA,KAAK,EAAE;AACHC,MAAAA,IAAI,EAAEZ,MAAM,CAACW,KAAP,CAAaC,IADhB;AAEHC,MAAAA,SAAS,EAAEZ;AAFR,KADI;AAKXa,IAAAA,QAAQ,EAAE;AACNF,MAAAA,IAAI,EAAEZ,MAAM,CAACc,QAAP,CAAgBF,IADhB;AAENC,MAAAA,SAAS,EAAEX;AAFL,KALC;AASXa,IAAAA,SAAS,EAAE;AACPH,MAAAA,IAAI,EAAEZ,MAAM,CAACe,SAAP,CAAiBH,IADhB;AAEPC,MAAAA,SAAS,EAAEV;AAFJ;AATA,GAAf;AAeA,sBACI;AAAA,2BACI,QAAC,MAAD;AAAA,gBACKO,MAAM,CAACM,GAAP,CAAWC,KAAK,IAAI;AACjB,4BAAO,QAAC,KAAD;AAAO,UAAA,IAAI,EAAEA,KAAK,CAACL,IAAnB;AAAyB,UAAA,SAAS,EAAEK,KAAK,CAACJ;AAA1C;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AASH,CA7BD;;GAAMP,M;UACaP,W;;;KADbO,M;AA+BNA,MAAM,CAACY,SAAP,GAAmB;AACfN,EAAAA,IAAI,EAAEf,SAAS,CAACsB,KAAV,CAAgBC,MAAM,CAACC,MAAP,CAAcrB,MAAd,CAAhB;AADS,CAAnB;AAIA,eAAeM,MAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { Route, useLocation } from 'react-router-dom';\nimport { ROUTES } from '../../config/constants';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Layout from '../Layout/Layout';\n\nimport { isPrivateRoute } from '../../utils/route';\n\nconst Routes = props => {\n    let location = useLocation();\n\n    isPrivateRoute(location.pathname);\n\n    const routes = {\n        login: {\n            path: ROUTES.login.path,\n            component: Login,\n        },\n        register: {\n            path: ROUTES.register.path,\n            component: Register,\n        },\n        dashboard: {\n            path: ROUTES.dashboard.path,\n            component: Dashboard,\n        },\n    };\n\n    return (\n        <>\n            <Layout>\n                {routes.map(route => {\n                    return <Route path={route.path} component={route.component} />;\n                })}\n            </Layout>\n        </>\n    );\n};\n\nRoutes.propTypes = {\n    path: PropTypes.oneOf(Object.values(ROUTES)),\n};\n\nexport default Routes;\n"]},"metadata":{},"sourceType":"module"}