{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\shared\\\\Tooltip\\\\Tooltip.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TOOLTIP_POSITION } from '../../../config/constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Tooltip = props => {\n  _s();\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const {\n    text,\n    position,\n    children,\n    className,\n    ...tooltipProps\n  } = props;\n  const TOOLTIP_STYLES = {\n    // [TOOLTIP_POSITION.top]: 'bottom-6 right-24',\n    // [TOOLTIP_POSITION.right]: '-top-1 left-20',\n    // [TOOLTIP_POSITION.bottom]: 'top-6 right-24',\n    // [TOOLTIP_POSITION.left]: '-top-1 right-52',\n    [TOOLTIP_POSITION.top]: '-translate-x-24 -translate-y-8',\n    [TOOLTIP_POSITION.right]: 'translate-x-2 -translate-y-1',\n    [TOOLTIP_POSITION.bottom]: '-translate-x-24 translate-y-6',\n    [TOOLTIP_POSITION.left]: '-top-1 right-52'\n  }; // ${TOOLTIP_STYLES[position]}\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: text ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative\",\n      onMouseEnter: () => setShowTooltip(!showTooltip),\n      onMouseLeave: () => setShowTooltip(!showTooltip),\n      children: [children, !showTooltip ? /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `bg-black opacity-70 text-white py-1 text-center w-36 absolute rounded transform translate-x-2 -translate-y-1  ${className}`,\n        ...tooltipProps,\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this) : null\n  }, void 0, false);\n};\n\n_s(Tooltip, \"MlKqB7CDspaiqeinDL2ipSY+OVU=\");\n\n_c = Tooltip;\nTooltip.propTypes = {\n  className: PropTypes.string,\n  text: PropTypes.string.isRequired,\n  position: PropTypes.string.isRequired\n};\nexport default Tooltip;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tooltip\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/shared/Tooltip/Tooltip.js"],"names":["useState","PropTypes","TOOLTIP_POSITION","Tooltip","props","showTooltip","setShowTooltip","text","position","children","className","tooltipProps","TOOLTIP_STYLES","top","right","bottom","left","propTypes","string","isRequired"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;;;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AAAA;;AACrB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM;AAAEO,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA,SAA5B;AAAuC,OAAGC;AAA1C,MAA2DP,KAAjE;AAEA,QAAMQ,cAAc,GAAG;AACnB;AACA;AACA;AACA;AACA,KAACV,gBAAgB,CAACW,GAAlB,GAAwB,gCALL;AAMnB,KAACX,gBAAgB,CAACY,KAAlB,GAA0B,8BANP;AAOnB,KAACZ,gBAAgB,CAACa,MAAlB,GAA2B,+BAPR;AAQnB,KAACb,gBAAgB,CAACc,IAAlB,GAAyB;AARN,GAAvB,CALqB,CAerB;;AACA,sBACI;AAAA,cACKT,IAAI,gBACD;AACI,MAAA,SAAS,EAAC,UADd;AAEI,MAAA,YAAY,EAAE,MAAMD,cAAc,CAAC,CAACD,WAAF,CAFtC;AAGI,MAAA,YAAY,EAAE,MAAMC,cAAc,CAAC,CAACD,WAAF,CAHtC;AAAA,iBAKKI,QALL,EAMK,CAACJ,WAAD,gBACG;AACI,QAAA,SAAS,EAAG,iHAAgHK,SAAU,EAD1I;AAAA,WAEQC,YAFR;AAAA,kBAIKJ;AAJL;AAAA;AAAA;AAAA;AAAA,cADH,GAOG,IAbR;AAAA;AAAA;AAAA;AAAA;AAAA,YADC,GAgBD;AAjBR,mBADJ;AAqBH,CArCD;;GAAMJ,O;;KAAAA,O;AAuCNA,OAAO,CAACc,SAAR,GAAoB;AAChBP,EAAAA,SAAS,EAAET,SAAS,CAACiB,MADL;AAEhBX,EAAAA,IAAI,EAAEN,SAAS,CAACiB,MAAV,CAAiBC,UAFP;AAGhBX,EAAAA,QAAQ,EAAEP,SAAS,CAACiB,MAAV,CAAiBC;AAHX,CAApB;AAMA,eAAehB,OAAf","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TOOLTIP_POSITION } from '../../../config/constants';\n\nconst Tooltip = props => {\n    const [showTooltip, setShowTooltip] = useState(false);\n\n    const { text, position, children, className, ...tooltipProps } = props;\n\n    const TOOLTIP_STYLES = {\n        // [TOOLTIP_POSITION.top]: 'bottom-6 right-24',\n        // [TOOLTIP_POSITION.right]: '-top-1 left-20',\n        // [TOOLTIP_POSITION.bottom]: 'top-6 right-24',\n        // [TOOLTIP_POSITION.left]: '-top-1 right-52',\n        [TOOLTIP_POSITION.top]: '-translate-x-24 -translate-y-8',\n        [TOOLTIP_POSITION.right]: 'translate-x-2 -translate-y-1',\n        [TOOLTIP_POSITION.bottom]: '-translate-x-24 translate-y-6',\n        [TOOLTIP_POSITION.left]: '-top-1 right-52',\n    };\n    // ${TOOLTIP_STYLES[position]}\n    return (\n        <>\n            {text ? (\n                <div\n                    className='relative'\n                    onMouseEnter={() => setShowTooltip(!showTooltip)}\n                    onMouseLeave={() => setShowTooltip(!showTooltip)}\n                >\n                    {children}\n                    {!showTooltip ? (\n                        <span\n                            className={`bg-black opacity-70 text-white py-1 text-center w-36 absolute rounded transform translate-x-2 -translate-y-1  ${className}`}\n                            {...tooltipProps}\n                        >\n                            {text}\n                        </span>\n                    ) : null}\n                </div>\n            ) : null}\n        </>\n    );\n};\n\nTooltip.propTypes = {\n    className: PropTypes.string,\n    text: PropTypes.string.isRequired,\n    position: PropTypes.string.isRequired,\n};\n\nexport default Tooltip;\n"]},"metadata":{},"sourceType":"module"}