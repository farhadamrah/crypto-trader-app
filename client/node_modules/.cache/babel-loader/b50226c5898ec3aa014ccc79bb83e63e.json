{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\Configurations\\\\EditConfigurationDrawer\\\\NameUpdateModal\\\\NameUpdateModal.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport Modal from '../../../shared/Modal/Modal';\nimport Input from '../../../shared/Input/Input';\nimport FormItem from '../../../shared/Form/FormItem/FormItem';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { updateConfiguration } from '../../../../redux/actions/configurations';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NameUpdateModal = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    isVisible,\n    hideModal,\n    configurationId,\n    configurationName\n  } = props;\n  const {\n    register: registerFormField,\n    handleSubmit,\n    reset,\n    formState: {\n      isDirty: hasUnsavedChanged\n    }\n  } = useForm({});\n  useEffect(() => {\n    reset({\n      name: configurationName\n    });\n  }, [configurationName]);\n\n  const onClose = () => {\n    hideModal();\n  };\n\n  const onOk = () => {\n    handleSubmit(async values => {\n      const updatedConfiguration = await dispatch(updateConfiguration({ ...values,\n        id: configurationId\n      }));\n\n      if (updatedConfiguration) {\n        hideModal();\n      }\n    })();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isVisible: isVisible,\n    onClose: onClose,\n    onOk: onOk,\n    title: 'Update name',\n    buttonProps: {\n      okText: 'Update'\n    },\n    showClose: true,\n    showFooter: true,\n    children: /*#__PURE__*/_jsxDEV(FormItem, {\n      label: 'Name',\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: 'Name',\n        ...registerFormField('name')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NameUpdateModal, \"ANT7Imi9loP4dwxUe5YdqU3QY1I=\", false, function () {\n  return [useDispatch, useForm];\n});\n\n_c = NameUpdateModal;\nNameUpdateModal.propTypes = {};\nexport default NameUpdateModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"NameUpdateModal\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/Configurations/EditConfigurationDrawer/NameUpdateModal/NameUpdateModal.js"],"names":["PropTypes","Modal","Input","FormItem","useForm","useDispatch","updateConfiguration","useEffect","NameUpdateModal","props","dispatch","isVisible","hideModal","configurationId","configurationName","register","registerFormField","handleSubmit","reset","formState","isDirty","hasUnsavedChanged","name","onClose","onOk","values","updatedConfiguration","id","okText","propTypes"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,QAAP,MAAqB,wCAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAAA;;AAC7B,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAM;AAAEM,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,eAAxB;AAAyCC,IAAAA;AAAzC,MAA+DL,KAArE;AAEA,QAAM;AACFM,IAAAA,QAAQ,EAAEC,iBADR;AAEFC,IAAAA,YAFE;AAGFC,IAAAA,KAHE;AAIFC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,OAAO,EAAEC;AAAX;AAJT,MAKFjB,OAAO,CAAC,EAAD,CALX;AAOAG,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,KAAK,CAAC;AAAEI,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAL;AACH,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;;AAIA,QAAMS,OAAO,GAAG,MAAM;AAClBX,IAAAA,SAAS;AACZ,GAFD;;AAIA,QAAMY,IAAI,GAAG,MAAM;AACfP,IAAAA,YAAY,CAAC,MAAMQ,MAAN,IAAgB;AACzB,YAAMC,oBAAoB,GAAG,MAAMhB,QAAQ,CAACJ,mBAAmB,CAAC,EAAE,GAAGmB,MAAL;AAAaE,QAAAA,EAAE,EAAEd;AAAjB,OAAD,CAApB,CAA3C;;AAEA,UAAIa,oBAAJ,EAA0B;AACtBd,QAAAA,SAAS;AACZ;AACJ,KANW,CAAZ;AAOH,GARD;;AAUA,sBACI,QAAC,KAAD;AACI,IAAA,SAAS,EAAED,SADf;AAEI,IAAA,OAAO,EAAEY,OAFb;AAGI,IAAA,IAAI,EAAEC,IAHV;AAII,IAAA,KAAK,EAAE,aAJX;AAKI,IAAA,WAAW,EAAE;AACTI,MAAAA,MAAM,EAAE;AADC,KALjB;AAQI,IAAA,SAAS,MARb;AASI,IAAA,UAAU,MATd;AAAA,2BAWI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAE,MAAjB;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,WAAW,EAAE,MAApB;AAAA,WAAgCZ,iBAAiB,CAAC,MAAD;AAAjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CA/CD;;GAAMR,e;UACeH,W,EASbD,O;;;KAVFI,e;AAiDNA,eAAe,CAACqB,SAAhB,GAA4B,EAA5B;AAEA,eAAerB,eAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport Modal from '../../../shared/Modal/Modal';\r\nimport Input from '../../../shared/Input/Input';\r\nimport FormItem from '../../../shared/Form/FormItem/FormItem';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateConfiguration } from '../../../../redux/actions/configurations';\r\nimport { useEffect } from 'react';\r\n\r\nconst NameUpdateModal = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { isVisible, hideModal, configurationId, configurationName } = props;\r\n\r\n    const {\r\n        register: registerFormField,\r\n        handleSubmit,\r\n        reset,\r\n        formState: { isDirty: hasUnsavedChanged },\r\n    } = useForm({});\r\n\r\n    useEffect(() => {\r\n        reset({ name: configurationName });\r\n    }, [configurationName]);\r\n\r\n    const onClose = () => {\r\n        hideModal();\r\n    };\r\n\r\n    const onOk = () => {\r\n        handleSubmit(async values => {\r\n            const updatedConfiguration = await dispatch(updateConfiguration({ ...values, id: configurationId }));\r\n\r\n            if (updatedConfiguration) {\r\n                hideModal();\r\n            }\r\n        })();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            isVisible={isVisible}\r\n            onClose={onClose}\r\n            onOk={onOk}\r\n            title={'Update name'}\r\n            buttonProps={{\r\n                okText: 'Update',\r\n            }}\r\n            showClose\r\n            showFooter\r\n        >\r\n            <FormItem label={'Name'}>\r\n                <Input placeholder={'Name'} {...registerFormField('name')} />\r\n            </FormItem>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nNameUpdateModal.propTypes = {};\r\n\r\nexport default NameUpdateModal;\r\n"]},"metadata":{},"sourceType":"module"}