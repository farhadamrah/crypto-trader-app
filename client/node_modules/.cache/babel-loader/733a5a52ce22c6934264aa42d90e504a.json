{"ast":null,"code":"import * as TYPES from '../types';\nconst initialState = {\n  isFetching: true,\n  isAuthenticated: false,\n  user: {},\n  confirmationToken: null\n};\n\nconst auth = (state = initialState, action) => {\n  const {\n    payload\n  } = action;\n\n  switch (action.type) {\n    case TYPES.AUTH_USER_LOGGED_IN:\n      {\n        return { ...state,\n          isFetching: false,\n          isAuthenticated: true,\n          user: payload\n        };\n      }\n\n    case TYPES.AUTH_USER_LOGGED_OUT:\n      {\n        return { ...state,\n          isAuthenticated: false,\n          user: {}\n        };\n      }\n\n    case TYPES.SET_CURRENT_USER:\n      {\n        return { ...state,\n          user: payload\n        };\n      }\n\n    case TYPES.AUTH_CONFIRMATION_TOKEN_CHANGED:\n      {\n        return { ...state,\n          confirmationToken: payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default auth;","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/redux/reducers/auth.js"],"names":["TYPES","initialState","isFetching","isAuthenticated","user","confirmationToken","auth","state","action","payload","type","AUTH_USER_LOGGED_IN","AUTH_USER_LOGGED_OUT","SET_CURRENT_USER","AUTH_CONFIRMATION_TOKEN_CHANGED"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,IADK;AAEjBC,EAAAA,eAAe,EAAE,KAFA;AAGjBC,EAAAA,IAAI,EAAE,EAHW;AAIjBC,EAAAA,iBAAiB,EAAE;AAJF,CAArB;;AAOA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAcD,MAApB;;AAEA,UAAQA,MAAM,CAACE,IAAf;AACI,SAAKV,KAAK,CAACW,mBAAX;AAAgC;AAC5B,eAAO,EACH,GAAGJ,KADA;AAEHL,UAAAA,UAAU,EAAE,KAFT;AAGHC,UAAAA,eAAe,EAAE,IAHd;AAIHC,UAAAA,IAAI,EAAEK;AAJH,SAAP;AAMH;;AACD,SAAKT,KAAK,CAACY,oBAAX;AAAiC;AAC7B,eAAO,EACH,GAAGL,KADA;AAEHJ,UAAAA,eAAe,EAAE,KAFd;AAGHC,UAAAA,IAAI,EAAE;AAHH,SAAP;AAKH;;AACD,SAAKJ,KAAK,CAACa,gBAAX;AAA6B;AACzB,eAAO,EACH,GAAGN,KADA;AAEHH,UAAAA,IAAI,EAAEK;AAFH,SAAP;AAIH;;AACD,SAAKT,KAAK,CAACc,+BAAX;AAA4C;AACxC,eAAO,EACH,GAAGP,KADA;AAEHF,UAAAA,iBAAiB,EAAEI;AAFhB,SAAP;AAIH;;AACD;AACI,aAAOF,KAAP;AA7BR;AA+BH,CAlCD;;AAoCA,eAAeD,IAAf","sourcesContent":["import * as TYPES from '../types';\r\n\r\nconst initialState = {\r\n    isFetching: true,\r\n    isAuthenticated: false,\r\n    user: {},\r\n    confirmationToken: null,\r\n};\r\n\r\nconst auth = (state = initialState, action) => {\r\n    const { payload } = action;\r\n\r\n    switch (action.type) {\r\n        case TYPES.AUTH_USER_LOGGED_IN: {\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                isAuthenticated: true,\r\n                user: payload,\r\n            };\r\n        }\r\n        case TYPES.AUTH_USER_LOGGED_OUT: {\r\n            return {\r\n                ...state,\r\n                isAuthenticated: false,\r\n                user: {},\r\n            };\r\n        }\r\n        case TYPES.SET_CURRENT_USER: {\r\n            return {\r\n                ...state,\r\n                user: payload,\r\n            };\r\n        }\r\n        case TYPES.AUTH_CONFIRMATION_TOKEN_CHANGED: {\r\n            return {\r\n                ...state,\r\n                confirmationToken: payload,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default auth;\r\n"]},"metadata":{},"sourceType":"module"}