{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\Routes\\\\PublicRoutes.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\nimport { ROUTES } from '../../config/constants';\nimport Login from '../Auth/Login/Login';\nimport Register from '../Auth/Register/Register';\nimport { useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { isPrivateRoute } from '../../utils/route';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PublicRoutes = props => {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation();\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\n  useEffect(() => {\n    if (isAuthenticated && !isPrivateRoute(location.pathname)) {\n      history.push(ROUTES.settings.path);\n    }\n  }, [isAuthenticated]);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: ROUTES.login.path,\n      component: Login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: ROUTES.register.path,\n      component: Register\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PublicRoutes, \"sBPlkEOsDwTsVRIp6reKYKfe9UI=\", false, function () {\n  return [useHistory, useLocation, useSelector];\n});\n\n_c = PublicRoutes;\nPublicRoutes.propTypes = {};\nexport default PublicRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"PublicRoutes\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/Routes/PublicRoutes.js"],"names":["PropTypes","Route","Switch","useHistory","useLocation","ROUTES","Login","Register","useSelector","useEffect","isPrivateRoute","PublicRoutes","props","history","location","isAuthenticated","state","auth","pathname","push","settings","path","login","register","propTypes"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,UAAxB,EAAoCC,WAApC,QAAuD,kBAAvD;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,mBAA/B;;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC1B,QAAMC,OAAO,GAAGV,UAAU,EAA1B;AACA,QAAMW,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAMW,eAAe,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,eAArB,CAAnC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,eAAe,IAAI,CAACL,cAAc,CAACI,QAAQ,CAACI,QAAV,CAAtC,EAA2D;AACvDL,MAAAA,OAAO,CAACM,IAAR,CAAad,MAAM,CAACe,QAAP,CAAgBC,IAA7B;AACH;AACJ,GAJQ,EAIN,CAACN,eAAD,CAJM,CAAT;AAMA,sBACI,QAAC,MAAD;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAEV,MAAM,CAACiB,KAAP,CAAaD,IAAhC;AAAsC,MAAA,SAAS,EAAEf;AAAjD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAED,MAAM,CAACkB,QAAP,CAAgBF,IAAnC;AAAyC,MAAA,SAAS,EAAEd;AAApD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAlBD;;GAAMI,Y;UACcR,U,EACCC,W,EAEOI,W;;;KAJtBG,Y;AAoBNA,YAAY,CAACa,SAAb,GAAyB,EAAzB;AAEA,eAAeb,YAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Route, Switch, useHistory, useLocation } from 'react-router-dom';\r\nimport { ROUTES } from '../../config/constants';\r\nimport Login from '../Auth/Login/Login';\r\nimport Register from '../Auth/Register/Register';\r\nimport { useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport { isPrivateRoute } from '../../utils/route';\r\n\r\nconst PublicRoutes = props => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\r\n\r\n    useEffect(() => {\r\n        if (isAuthenticated && !isPrivateRoute(location.pathname)) {\r\n            history.push(ROUTES.settings.path);\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path={ROUTES.login.path} component={Login} />\r\n            <Route exact path={ROUTES.register.path} component={Register} />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nPublicRoutes.propTypes = {};\r\n\r\nexport default PublicRoutes;\r\n"]},"metadata":{},"sourceType":"module"}