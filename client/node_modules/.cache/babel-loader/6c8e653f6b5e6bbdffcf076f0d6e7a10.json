{"ast":null,"code":"import AuthService from '../../services/AuthService';\nimport * as TYPES from '../types';\nimport { setAuthToken } from '../../utils/auth';\nimport { showMessageComponent } from './components';\nimport { ERROR_MESSAGES, MESSAGE_TYPE } from '../../config/constants';\nexport const setUserLoggedIn = user => ({\n  type: TYPES.AUTH_USER_LOGGED_IN,\n  payload: user\n});\nexport const setUserLoggedOut = () => ({\n  type: TYPES.AUTH_USER_LOGGED_OUT\n});\nexport const setCurrentUser = user => ({\n  type: TYPES.SET_CURRENT_USER,\n  payload: user\n});\nexport const setConfirmationToken = token => ({\n  type: TYPES.AUTH_CONFIRMATION_TOKEN_CHANGED,\n  payload: token\n});\nexport const login = userData => async dispatch => {\n  try {\n    const response = await AuthService.login(userData);\n    const {\n      token,\n      ...user\n    } = response.data;\n    setAuthToken(token);\n    dispatch(setUserLoggedIn(user));\n    console.log(response.data);\n    return user;\n  } catch (error) {\n    var _error$response;\n\n    const errorResponseMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};\nexport const register = userData => async dispatch => {\n  try {\n    const response = await AuthService.register(userData);\n    const {\n      token,\n      ...user\n    } = response.data;\n    setAuthToken(token);\n    dispatch(setUserLoggedIn(user));\n    return user;\n  } catch (error) {\n    var _error$response2;\n\n    const errorResponseMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};\nexport const fetchCurrentUser = () => async dispatch => {\n  try {\n    const response = await AuthService.fetchCurrentUser();\n    const user = response.data;\n    dispatch(setUserLoggedIn(user));\n    return user;\n  } catch (error) {\n    var _error$response3;\n\n    console.error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data.error.message) || error);\n  }\n};\nexport const generateConfirmationToken = password => async dispatch => {\n  try {\n    const response = await AuthService.generateConfirmationToken({\n      password\n    });\n    const token = response.data;\n    dispatch(setConfirmationToken(token));\n    return token;\n  } catch (error) {\n    var _error$response4;\n\n    const errorResponseMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/redux/actions/auth.js"],"names":["AuthService","TYPES","setAuthToken","showMessageComponent","ERROR_MESSAGES","MESSAGE_TYPE","setUserLoggedIn","user","type","AUTH_USER_LOGGED_IN","payload","setUserLoggedOut","AUTH_USER_LOGGED_OUT","setCurrentUser","SET_CURRENT_USER","setConfirmationToken","token","AUTH_CONFIRMATION_TOKEN_CHANGED","login","userData","dispatch","response","data","console","log","error","errorResponseMessage","message","defaultError","destroyAll","register","fetchCurrentUser","generateConfirmationToken","password"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,oBAAT,QAAqC,cAArC;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,wBAA7C;AAEA,OAAO,MAAMC,eAAe,GAAGC,IAAI,KAAK;AACpCC,EAAAA,IAAI,EAAEP,KAAK,CAACQ,mBADwB;AAEpCC,EAAAA,OAAO,EAAEH;AAF2B,CAAL,CAA5B;AAKP,OAAO,MAAMI,gBAAgB,GAAG,OAAO;AACnCH,EAAAA,IAAI,EAAEP,KAAK,CAACW;AADuB,CAAP,CAAzB;AAIP,OAAO,MAAMC,cAAc,GAAGN,IAAI,KAAK;AACnCC,EAAAA,IAAI,EAAEP,KAAK,CAACa,gBADuB;AAEnCJ,EAAAA,OAAO,EAAEH;AAF0B,CAAL,CAA3B;AAKP,OAAO,MAAMQ,oBAAoB,GAAGC,KAAK,KAAK;AAC1CR,EAAAA,IAAI,EAAEP,KAAK,CAACgB,+BAD8B;AAE1CP,EAAAA,OAAO,EAAEM;AAFiC,CAAL,CAAlC;AAKP,OAAO,MAAME,KAAK,GAAGC,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AAC/C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMrB,WAAW,CAACkB,KAAZ,CAAkBC,QAAlB,CAAvB;AAEA,UAAM;AAAEH,MAAAA,KAAF;AAAS,SAAGT;AAAZ,QAAqBc,QAAQ,CAACC,IAApC;AAEApB,IAAAA,YAAY,CAACc,KAAD,CAAZ;AAEAI,IAAAA,QAAQ,CAACd,eAAe,CAACC,IAAD,CAAhB,CAAR;AAEAgB,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAArB;AAEA,WAAOf,IAAP;AACH,GAZD,CAYE,OAAOkB,KAAP,EAAc;AAAA;;AACZ,UAAMC,oBAAoB,GAAG,oBAAAD,KAAK,CAACJ,QAAN,oEAAgBC,IAAhB,CAAqBG,KAArB,CAA2BE,OAA3B,KAAsCvB,cAAc,CAACwB,YAAlF;AAEAL,IAAAA,OAAO,CAACE,KAAR,CAAcC,oBAAoB,IAAID,KAAtC;AAEAL,IAAAA,QAAQ,CAACjB,oBAAoB,CAACE,YAAY,CAACoB,KAAd,EAAqBC,oBAArB,EAA2C;AAAEG,MAAAA,UAAU,EAAE;AAAd,KAA3C,CAArB,CAAR;AACH;AACJ,CApBM;AAsBP,OAAO,MAAMC,QAAQ,GAAGX,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AAClD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMrB,WAAW,CAAC8B,QAAZ,CAAqBX,QAArB,CAAvB;AAEA,UAAM;AAAEH,MAAAA,KAAF;AAAS,SAAGT;AAAZ,QAAqBc,QAAQ,CAACC,IAApC;AAEApB,IAAAA,YAAY,CAACc,KAAD,CAAZ;AAEAI,IAAAA,QAAQ,CAACd,eAAe,CAACC,IAAD,CAAhB,CAAR;AAEA,WAAOA,IAAP;AACH,GAVD,CAUE,OAAOkB,KAAP,EAAc;AAAA;;AACZ,UAAMC,oBAAoB,GAAG,qBAAAD,KAAK,CAACJ,QAAN,sEAAgBC,IAAhB,CAAqBG,KAArB,CAA2BE,OAA3B,KAAsCvB,cAAc,CAACwB,YAAlF;AAEAL,IAAAA,OAAO,CAACE,KAAR,CAAcC,oBAAoB,IAAID,KAAtC;AAEAL,IAAAA,QAAQ,CAACjB,oBAAoB,CAACE,YAAY,CAACoB,KAAd,EAAqBC,oBAArB,EAA2C;AAAEG,MAAAA,UAAU,EAAE;AAAd,KAA3C,CAArB,CAAR;AACH;AACJ,CAlBM;AAoBP,OAAO,MAAME,gBAAgB,GAAG,MAAM,MAAMX,QAAN,IAAkB;AACpD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMrB,WAAW,CAAC+B,gBAAZ,EAAvB;AAEA,UAAMxB,IAAI,GAAGc,QAAQ,CAACC,IAAtB;AAEAF,IAAAA,QAAQ,CAACd,eAAe,CAACC,IAAD,CAAhB,CAAR;AAEA,WAAOA,IAAP;AACH,GARD,CAQE,OAAOkB,KAAP,EAAc;AAAA;;AACZF,IAAAA,OAAO,CAACE,KAAR,CAAc,qBAAAA,KAAK,CAACJ,QAAN,sEAAgBC,IAAhB,CAAqBG,KAArB,CAA2BE,OAA3B,KAAsCF,KAApD;AACH;AACJ,CAZM;AAcP,OAAO,MAAMO,yBAAyB,GAAGC,QAAQ,IAAI,MAAMb,QAAN,IAAkB;AACnE,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMrB,WAAW,CAACgC,yBAAZ,CAAsC;AAAEC,MAAAA;AAAF,KAAtC,CAAvB;AAEA,UAAMjB,KAAK,GAAGK,QAAQ,CAACC,IAAvB;AAEAF,IAAAA,QAAQ,CAACL,oBAAoB,CAACC,KAAD,CAArB,CAAR;AAEA,WAAOA,KAAP;AACH,GARD,CAQE,OAAOS,KAAP,EAAc;AAAA;;AACZ,UAAMC,oBAAoB,GAAG,qBAAAD,KAAK,CAACJ,QAAN,sEAAgBC,IAAhB,CAAqBG,KAArB,CAA2BE,OAA3B,KAAsCvB,cAAc,CAACwB,YAAlF;AAEAL,IAAAA,OAAO,CAACE,KAAR,CAAcC,oBAAoB,IAAID,KAAtC;AAEAL,IAAAA,QAAQ,CAACjB,oBAAoB,CAACE,YAAY,CAACoB,KAAd,EAAqBC,oBAArB,EAA2C;AAAEG,MAAAA,UAAU,EAAE;AAAd,KAA3C,CAArB,CAAR;AACH;AACJ,CAhBM","sourcesContent":["import AuthService from '../../services/AuthService';\r\nimport * as TYPES from '../types';\r\nimport { setAuthToken } from '../../utils/auth';\r\nimport { showMessageComponent } from './components';\r\nimport { ERROR_MESSAGES, MESSAGE_TYPE } from '../../config/constants';\r\n\r\nexport const setUserLoggedIn = user => ({\r\n    type: TYPES.AUTH_USER_LOGGED_IN,\r\n    payload: user,\r\n});\r\n\r\nexport const setUserLoggedOut = () => ({\r\n    type: TYPES.AUTH_USER_LOGGED_OUT,\r\n});\r\n\r\nexport const setCurrentUser = user => ({\r\n    type: TYPES.SET_CURRENT_USER,\r\n    payload: user,\r\n});\r\n\r\nexport const setConfirmationToken = token => ({\r\n    type: TYPES.AUTH_CONFIRMATION_TOKEN_CHANGED,\r\n    payload: token,\r\n});\r\n\r\nexport const login = userData => async dispatch => {\r\n    try {\r\n        const response = await AuthService.login(userData);\r\n\r\n        const { token, ...user } = response.data;\r\n\r\n        setAuthToken(token);\r\n\r\n        dispatch(setUserLoggedIn(user));\r\n\r\n        console.log(response.data);\r\n\r\n        return user;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n\r\nexport const register = userData => async dispatch => {\r\n    try {\r\n        const response = await AuthService.register(userData);\r\n\r\n        const { token, ...user } = response.data;\r\n\r\n        setAuthToken(token);\r\n\r\n        dispatch(setUserLoggedIn(user));\r\n\r\n        return user;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n\r\nexport const fetchCurrentUser = () => async dispatch => {\r\n    try {\r\n        const response = await AuthService.fetchCurrentUser();\r\n\r\n        const user = response.data;\r\n\r\n        dispatch(setUserLoggedIn(user));\r\n\r\n        return user;\r\n    } catch (error) {\r\n        console.error(error.response?.data.error.message || error);\r\n    }\r\n};\r\n\r\nexport const generateConfirmationToken = password => async dispatch => {\r\n    try {\r\n        const response = await AuthService.generateConfirmationToken({ password });\r\n\r\n        const token = response.data;\r\n\r\n        dispatch(setConfirmationToken(token));\r\n\r\n        return token;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}