{"ast":null,"code":"import AuthService from '../../services/AuthService';\nimport * as TYPES from '../types';\nimport { setAuthToken } from '../../utils/auth';\nimport { showMessageComponent } from './components';\nimport { MESSAGE_TYPE } from '../../config/constants';\nexport const setUserLoggedIn = user => ({\n  type: TYPES.AUTH_USER_LOGGED_IN,\n  payload: user\n});\nexport const setUserLoggedOut = () => ({\n  type: TYPES.AUTH_USER_LOGGED_OUT\n});\nexport const setCurrentUser = user => ({\n  type: TYPES.SET_CURRENT_USER,\n  payload: user\n});\nexport const login = userData => async dispatch => {\n  try {\n    const response = await AuthService.login(userData);\n    const {\n      token,\n      ...user\n    } = response.data;\n    setAuthToken(token);\n    dispatch(setUserLoggedIn(user));\n    return user;\n  } catch (error) {\n    var _error$response;\n\n    const errorResponseMessage = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.error.message;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage));\n  }\n};\nexport const register = userData => async dispatch => {\n  try {\n    const response = await AuthService.register(userData);\n    const {\n      token,\n      ...user\n    } = response.data;\n    setAuthToken(token);\n    dispatch(setUserLoggedIn(user));\n    return user;\n  } catch (error) {\n    var _error$response2;\n\n    const errorResponseMessage = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.error.message;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage));\n  }\n};\nexport const fetchCurrentUser = () => async dispatch => {\n  try {\n    const response = await AuthService.fetchCurrentUser();\n    const user = response.data;\n    dispatch(setCurrentUser(user));\n    return user;\n  } catch (error) {\n    var _error$response3;\n\n    console.error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data.error.message) || error);\n  }\n};","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/redux/actions/auth.js"],"names":["AuthService","TYPES","setAuthToken","showMessageComponent","MESSAGE_TYPE","setUserLoggedIn","user","type","AUTH_USER_LOGGED_IN","payload","setUserLoggedOut","AUTH_USER_LOGGED_OUT","setCurrentUser","SET_CURRENT_USER","login","userData","dispatch","response","token","data","error","errorResponseMessage","message","console","register","fetchCurrentUser"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,4BAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,oBAAT,QAAqC,cAArC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,OAAO,MAAMC,eAAe,GAAGC,IAAI,KAAK;AACpCC,EAAAA,IAAI,EAAEN,KAAK,CAACO,mBADwB;AAEpCC,EAAAA,OAAO,EAAEH;AAF2B,CAAL,CAA5B;AAKP,OAAO,MAAMI,gBAAgB,GAAG,OAAO;AACnCH,EAAAA,IAAI,EAAEN,KAAK,CAACU;AADuB,CAAP,CAAzB;AAIP,OAAO,MAAMC,cAAc,GAAGN,IAAI,KAAK;AACnCC,EAAAA,IAAI,EAAEN,KAAK,CAACY,gBADuB;AAEnCJ,EAAAA,OAAO,EAAEH;AAF0B,CAAL,CAA3B;AAKP,OAAO,MAAMQ,KAAK,GAAGC,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AAC/C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMjB,WAAW,CAACc,KAAZ,CAAkBC,QAAlB,CAAvB;AAEA,UAAM;AAAEG,MAAAA,KAAF;AAAS,SAAGZ;AAAZ,QAAqBW,QAAQ,CAACE,IAApC;AAEAjB,IAAAA,YAAY,CAACgB,KAAD,CAAZ;AAEAF,IAAAA,QAAQ,CAACX,eAAe,CAACC,IAAD,CAAhB,CAAR;AAEA,WAAOA,IAAP;AACH,GAVD,CAUE,OAAOc,KAAP,EAAc;AAAA;;AACZ,UAAMC,oBAAoB,sBAAGD,KAAK,CAACH,QAAT,oDAAG,gBAAgBE,IAAhB,CAAqBC,KAArB,CAA2BE,OAAxD;AAEAC,IAAAA,OAAO,CAACH,KAAR,CAAcC,oBAAoB,IAAID,KAAtC;AAEAJ,IAAAA,QAAQ,CAACb,oBAAoB,CAACC,YAAY,CAACgB,KAAd,EAAqBC,oBAArB,CAArB,CAAR;AACH;AACJ,CAlBM;AAoBP,OAAO,MAAMG,QAAQ,GAAGT,QAAQ,IAAI,MAAMC,QAAN,IAAkB;AAClD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMjB,WAAW,CAACwB,QAAZ,CAAqBT,QAArB,CAAvB;AAEA,UAAM;AAAEG,MAAAA,KAAF;AAAS,SAAGZ;AAAZ,QAAqBW,QAAQ,CAACE,IAApC;AAEAjB,IAAAA,YAAY,CAACgB,KAAD,CAAZ;AAEAF,IAAAA,QAAQ,CAACX,eAAe,CAACC,IAAD,CAAhB,CAAR;AAEA,WAAOA,IAAP;AACH,GAVD,CAUE,OAAOc,KAAP,EAAc;AAAA;;AACZ,UAAMC,oBAAoB,uBAAGD,KAAK,CAACH,QAAT,qDAAG,iBAAgBE,IAAhB,CAAqBC,KAArB,CAA2BE,OAAxD;AAEAC,IAAAA,OAAO,CAACH,KAAR,CAAcC,oBAAoB,IAAID,KAAtC;AAEAJ,IAAAA,QAAQ,CAACb,oBAAoB,CAACC,YAAY,CAACgB,KAAd,EAAqBC,oBAArB,CAArB,CAAR;AACH;AACJ,CAlBM;AAoBP,OAAO,MAAMI,gBAAgB,GAAG,MAAM,MAAMT,QAAN,IAAkB;AACpD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMjB,WAAW,CAACyB,gBAAZ,EAAvB;AAEA,UAAMnB,IAAI,GAAGW,QAAQ,CAACE,IAAtB;AAEAH,IAAAA,QAAQ,CAACJ,cAAc,CAACN,IAAD,CAAf,CAAR;AAEA,WAAOA,IAAP;AACH,GARD,CAQE,OAAOc,KAAP,EAAc;AAAA;;AACZG,IAAAA,OAAO,CAACH,KAAR,CAAc,qBAAAA,KAAK,CAACH,QAAN,sEAAgBE,IAAhB,CAAqBC,KAArB,CAA2BE,OAA3B,KAAsCF,KAApD;AACH;AACJ,CAZM","sourcesContent":["import AuthService from '../../services/AuthService';\r\nimport * as TYPES from '../types';\r\nimport { setAuthToken } from '../../utils/auth';\r\nimport { showMessageComponent } from './components';\r\nimport { MESSAGE_TYPE } from '../../config/constants';\r\n\r\nexport const setUserLoggedIn = user => ({\r\n    type: TYPES.AUTH_USER_LOGGED_IN,\r\n    payload: user,\r\n});\r\n\r\nexport const setUserLoggedOut = () => ({\r\n    type: TYPES.AUTH_USER_LOGGED_OUT,\r\n});\r\n\r\nexport const setCurrentUser = user => ({\r\n    type: TYPES.SET_CURRENT_USER,\r\n    payload: user,\r\n});\r\n\r\nexport const login = userData => async dispatch => {\r\n    try {\r\n        const response = await AuthService.login(userData);\r\n\r\n        const { token, ...user } = response.data;\r\n\r\n        setAuthToken(token);\r\n\r\n        dispatch(setUserLoggedIn(user));\r\n\r\n        return user;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage));\r\n    }\r\n};\r\n\r\nexport const register = userData => async dispatch => {\r\n    try {\r\n        const response = await AuthService.register(userData);\r\n\r\n        const { token, ...user } = response.data;\r\n\r\n        setAuthToken(token);\r\n\r\n        dispatch(setUserLoggedIn(user));\r\n\r\n        return user;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage));\r\n    }\r\n};\r\n\r\nexport const fetchCurrentUser = () => async dispatch => {\r\n    try {\r\n        const response = await AuthService.fetchCurrentUser();\r\n\r\n        const user = response.data;\r\n\r\n        dispatch(setCurrentUser(user));\r\n\r\n        return user;\r\n    } catch (error) {\r\n        console.error(error.response?.data.error.message || error);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}