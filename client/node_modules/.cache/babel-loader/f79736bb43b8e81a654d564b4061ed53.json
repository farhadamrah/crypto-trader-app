{"ast":null,"code":"import { showMessageComponent } from './components';\nimport { ERROR_MESSAGES, MESSAGE_TYPE } from '../../config/constants';\nimport UserService from '../../services/UserService';\nimport { setCurrentUser } from './auth';\nexport const updateUser = userData => async dispatch => {\n  try {\n    const response = await UserService.updateUser(userData);\n    const updatedUser = response.data;\n    dispatch(setCurrentUser(updatedUser));\n    return updatedUser;\n  } catch (error) {\n    var _error$response;\n\n    const errorResponseMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};\nexport const updatePassword = userData => async (dispatch, getStore) => {\n  try {\n    const store = getStore();\n    const {\n      confirmationToken\n    } = store.auth;\n    const response = await UserService.updatePassword(userData, confirmationToken);\n    const updatedUser = response.data;\n    return updatedUser;\n  } catch (error) {\n    var _error$response2;\n\n    const errorResponseMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};\nexport const connectTelegram = userData => async dispatch => {\n  try {\n    const response = await UserService.connectTelegram(userData);\n    const updatedUser = response.data;\n    dispatch(setCurrentUser(updatedUser));\n    return updatedUser;\n  } catch (error) {\n    var _error$response3;\n\n    const errorResponseMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};\nexport const disconnectTelegram = userId => async (dispatch, getStore) => {\n  try {\n    const store = getStore();\n    const {\n      confirmationToken\n    } = store.auth;\n    const response = await UserService.disconnectTelegram(userId, confirmationToken);\n    const updatedUser = response.data;\n    dispatch(setCurrentUser(updatedUser));\n    return updatedUser;\n  } catch (error) {\n    var _error$response4;\n\n    const errorResponseMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};\nexport const updateUserConfiguration = userData => async dispatch => {\n  try {\n    const response = await UserService.updateActiveConfiguration(userData);\n    const updatedUser = response.data;\n    dispatch(setCurrentUser(updatedUser));\n    return updatedUser;\n  } catch (error) {\n    var _error$response5;\n\n    const errorResponseMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};\nexport const deleteUser = userId => async dispatch => {\n  try {\n    const response = await UserService.deleteUser(userId);\n    const deletedUser = response.data;\n    return deletedUser;\n  } catch (error) {\n    var _error$response6;\n\n    const errorResponseMessage = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data.error.message) || ERROR_MESSAGES.defaultError;\n    console.error(errorResponseMessage || error);\n    dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, {\n      destroyAll: true\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/redux/actions/users.js"],"names":["showMessageComponent","ERROR_MESSAGES","MESSAGE_TYPE","UserService","setCurrentUser","updateUser","userData","dispatch","response","updatedUser","data","error","errorResponseMessage","message","defaultError","console","destroyAll","updatePassword","getStore","store","confirmationToken","auth","connectTelegram","disconnectTelegram","userId","updateUserConfiguration","updateActiveConfiguration","deleteUser","deletedUser"],"mappings":"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","sourcesContent":["import { showMessageComponent } from './components';\r\nimport { ERROR_MESSAGES, MESSAGE_TYPE } from '../../config/constants';\r\nimport UserService from '../../services/UserService';\r\nimport { setCurrentUser } from './auth';\r\n\r\nexport const updateUser = userData => async dispatch => {\r\n    try {\r\n        const response = await UserService.updateUser(userData);\r\n\r\n        const updatedUser = response.data;\r\n\r\n        dispatch(setCurrentUser(updatedUser));\r\n\r\n        return updatedUser;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n\r\nexport const updatePassword = userData => async (dispatch, getStore) => {\r\n    try {\r\n        const store = getStore();\r\n        const { confirmationToken } = store.auth;\r\n\r\n        const response = await UserService.updatePassword(userData, confirmationToken);\r\n\r\n        const updatedUser = response.data;\r\n\r\n        return updatedUser;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n\r\nexport const connectTelegram = userData => async dispatch => {\r\n    try {\r\n        const response = await UserService.connectTelegram(userData);\r\n\r\n        const updatedUser = response.data;\r\n\r\n        dispatch(setCurrentUser(updatedUser));\r\n\r\n        return updatedUser;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n\r\nexport const disconnectTelegram = userId => async (dispatch, getStore) => {\r\n    try {\r\n        const store = getStore();\r\n        const { confirmationToken } = store.auth;\r\n\r\n        const response = await UserService.disconnectTelegram(userId, confirmationToken);\r\n\r\n        const updatedUser = response.data;\r\n\r\n        dispatch(setCurrentUser(updatedUser));\r\n\r\n        return updatedUser;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n\r\nexport const updateUserConfiguration = userData => async dispatch => {\r\n    try {\r\n        const response = await UserService.updateActiveConfiguration(userData);\r\n\r\n        const updatedUser = response.data;\r\n\r\n        dispatch(setCurrentUser(updatedUser));\r\n\r\n        return updatedUser;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n\r\nexport const deleteUser = userId => async dispatch => {\r\n    try {\r\n        const response = await UserService.deleteUser(userId);\r\n\r\n        const deletedUser = response.data;\r\n\r\n        return deletedUser;\r\n    } catch (error) {\r\n        const errorResponseMessage = error.response?.data.error.message || ERROR_MESSAGES.defaultError;\r\n\r\n        console.error(errorResponseMessage || error);\r\n\r\n        dispatch(showMessageComponent(MESSAGE_TYPE.error, errorResponseMessage, { destroyAll: true }));\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}