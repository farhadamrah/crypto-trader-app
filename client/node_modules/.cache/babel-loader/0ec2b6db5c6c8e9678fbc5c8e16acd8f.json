{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FARHAD\\\\Documents\\\\GitHub\\\\crypto-trader\\\\client\\\\src\\\\components\\\\Routes\\\\PrivateRoutes.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { Redirect, Switch } from 'react-router-dom';\nimport { ROUTES } from '../../config/constants';\nimport Layout from '../Layout/Layout';\nimport PrivateRoute from '../shared/PrivateRoute/PrivateRoute';\nimport Settings from '../Settings/Settings';\nimport Configurations from '../Configurations/Configurations';\nimport History from '../History/History';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoutes = props => {\n  _s();\n\n  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: ROUTES.settings.path,\n        component: Settings,\n        isAuthenticated: isAuthenticated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        exact: true,\n        path: ROUTES.configurations.path,\n        component: Configurations,\n        isAuthenticated: isAuthenticated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        exact: true,\n        path: ROUTES.configurations.path,\n        component: Configurations,\n        isAuthenticated: isAuthenticated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        exact: true,\n        path: ROUTES.history.path,\n        component: History,\n        isAuthenticated: isAuthenticated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n        from: '/',\n        to: ROUTES.login.path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PrivateRoutes, \"Tis/laFBs1mUsdamrhCn/+4kssg=\", false, function () {\n  return [useSelector];\n});\n\n_c = PrivateRoutes;\nPrivateRoutes.propTypes = {};\nexport default PrivateRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoutes\");","map":{"version":3,"sources":["C:/Users/FARHAD/Documents/GitHub/crypto-trader/client/src/components/Routes/PrivateRoutes.js"],"names":["PropTypes","Redirect","Switch","ROUTES","Layout","PrivateRoute","Settings","Configurations","History","useSelector","PrivateRoutes","props","isAuthenticated","state","auth","settings","path","configurations","history","login","propTypes"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,kBAAjC;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAC3B,QAAMC,eAAe,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,eAArB,CAAnC;AAEA,sBACI,QAAC,MAAD;AAAA,2BACI,QAAC,MAAD;AAAA,8BACI,QAAC,YAAD;AAAc,QAAA,IAAI,EAAET,MAAM,CAACY,QAAP,CAAgBC,IAApC;AAA0C,QAAA,SAAS,EAAEV,QAArD;AAA+D,QAAA,eAAe,EAAEM;AAAhF;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,YAAD;AACI,QAAA,KAAK,MADT;AAEI,QAAA,IAAI,EAAET,MAAM,CAACc,cAAP,CAAsBD,IAFhC;AAGI,QAAA,SAAS,EAAET,cAHf;AAII,QAAA,eAAe,EAAEK;AAJrB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAQI,QAAC,YAAD;AACI,QAAA,KAAK,MADT;AAEI,QAAA,IAAI,EAAET,MAAM,CAACc,cAAP,CAAsBD,IAFhC;AAGI,QAAA,SAAS,EAAET,cAHf;AAII,QAAA,eAAe,EAAEK;AAJrB;AAAA;AAAA;AAAA;AAAA,cARJ,eAcI,QAAC,YAAD;AAAc,QAAA,KAAK,MAAnB;AAAoB,QAAA,IAAI,EAAET,MAAM,CAACe,OAAP,CAAeF,IAAzC;AAA+C,QAAA,SAAS,EAAER,OAA1D;AAAmE,QAAA,eAAe,EAAEI;AAApF;AAAA;AAAA;AAAA;AAAA,cAdJ,eAeI,QAAC,QAAD;AAAU,QAAA,IAAI,EAAE,GAAhB;AAAqB,QAAA,EAAE,EAAET,MAAM,CAACgB,KAAP,CAAaH;AAAtC;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAxBD;;GAAMN,a;UACsBD,W;;;KADtBC,a;AA0BNA,aAAa,CAACU,SAAd,GAA0B,EAA1B;AAEA,eAAeV,aAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Redirect, Switch } from 'react-router-dom';\r\nimport { ROUTES } from '../../config/constants';\r\nimport Layout from '../Layout/Layout';\r\nimport PrivateRoute from '../shared/PrivateRoute/PrivateRoute';\r\nimport Settings from '../Settings/Settings';\r\nimport Configurations from '../Configurations/Configurations';\r\nimport History from '../History/History';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PrivateRoutes = props => {\r\n    const isAuthenticated = useSelector(state => state.auth.isAuthenticated);\r\n\r\n    return (\r\n        <Layout>\r\n            <Switch>\r\n                <PrivateRoute path={ROUTES.settings.path} component={Settings} isAuthenticated={isAuthenticated} />\r\n                <PrivateRoute\r\n                    exact\r\n                    path={ROUTES.configurations.path}\r\n                    component={Configurations}\r\n                    isAuthenticated={isAuthenticated}\r\n                />\r\n                <PrivateRoute\r\n                    exact\r\n                    path={ROUTES.configurations.path}\r\n                    component={Configurations}\r\n                    isAuthenticated={isAuthenticated}\r\n                />\r\n                <PrivateRoute exact path={ROUTES.history.path} component={History} isAuthenticated={isAuthenticated} />\r\n                <Redirect from={'/'} to={ROUTES.login.path} />\r\n            </Switch>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nPrivateRoutes.propTypes = {};\r\n\r\nexport default PrivateRoutes;\r\n"]},"metadata":{},"sourceType":"module"}